cardtest1.c
***** Testing smithyCard()... *****
Testing Player 0 Smithy +3 hand count...
Test FAILED
Player hand count incorrect. Expected: 7 Actual: 6
Testing Player 0 deck count -3...
Test FAILED
Player deck count incorrect. Expected: 2 Actual: 3
Testing Player 0 score unchanged...
Test PASSED
Testing Player 1 score unchanged...
Test PASSED
Testing Player 1 hand count unchanged...
Test PASSED
Testing Player 1 deck count unchanged...
Test PASSED
Testing Victory Card Piles unchanged...
Estate Card Pile...
Test PASSED
Province Card Pile...
Test PASSED
Duchy Card Pile...
Test PASSED
Testing Kingdom Card Piles unchanged...
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test PASSED
***** smithyCard() Tests Complete *****

Processing file 1 out of 1
File 'dominion.c'
Lines executed:22.72% of 559
Branches executed:27.58% of 417
Taken at least once:17.03% of 417
Calls executed:11.58% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 30 returned 100% blocks executed 83%
       30:    8:int compare(const void* a, const void* b) {
       30:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
       30:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
        8:   12:    return -1;
       22:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 1 returned 100% blocks executed 88%
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        1:   44:  SelectStream(1);
call    0 returned 100%
        1:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
        1:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        1:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       11:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      110:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        1:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        1:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        1:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        1:   89:      state->supplyCount[estate] = 8;
        1:   90:      state->supplyCount[duchy] = 8;
        1:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        1:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:  state->supplyCount[silver] = 40;
        1:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       21:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
      165:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
      155:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       10:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:		{
        2:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
        9:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       10:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      145:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        3:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
        2:  140:      state->deckCount[i] = 0;
        8:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
        6:  143:	  state->deck[i][j] = estate;
        6:  144:	  state->deckCount[i]++;
        -:  145:	}
       16:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       14:  148:	  state->deck[i][j] = copper;
       14:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        3:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
        2:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        3:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        2:  166:      state->handCount[i] = 0;
        2:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
       28:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
       27:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        1:  182:  state->outpostPlayed = 0;
        1:  183:  state->phase = 0;
        1:  184:  state->numActions = 1;
        1:  185:  state->numBuys = 1;
        1:  186:  state->playedCardCount = 0;
        1:  187:  state->whoseTurn = 0;
        1:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
        6:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        1:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        1:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 2 returned 100% blocks executed 94%
        2:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        2:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        2:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
        2:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       24:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       20:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
       20:  216:    newDeck[newDeckPos] = state->deck[player][card];
       20:  217:    newDeckPos++;
       63:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 68%
branch  1 taken 32% (fallthrough)
       43:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       20:  221:    state->deckCount[player]--;
        -:  222:  }
       22:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       20:  224:    state->deck[player][i] = newDeck[i];
       20:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        2:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 1 returned 100% blocks executed 100%
        1:  346:int whoseTurn(struct gameState *state) {
        1:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 4 returned 100% blocks executed 32%
        4:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
        4:  420:  int score = 0;
        -:  421:  //score from hand
       15:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 73%
branch  1 taken 27% (fallthrough)
        -:  423:    {
       11:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       11:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
       11:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       11:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       11:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       11:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
        4:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
        4:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
        4:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 7 returned 100% blocks executed 38%
        7:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
        7:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
        7:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
        7:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
        7:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        7:  576:    state->deckCount[player]--;
        7:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
        7:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:/*************** REFACTORED CARDS ****************/
        -:  647:// BUG- drawntreasure = 1 instead of 0
function adventurerCard called 0 returned 0% blocks executed 0%
    #####:  648:int adventurerCard(int currentPlayer, int temphand[], struct gameState *state) {
        -:  649:	//int drawntreasure=0;
    #####:  650:	int drawntreasure=1;
        -:  651:	int cardDrawn;
    #####:  652:	int z=0;
        -:  653:	
    #####:  654:	while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####:  655:		if (state->deckCount[currentPlayer] < 1){ //if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  656:		shuffle(currentPlayer, state);
call    0 never executed
        -:  657:		}
    #####:  658:		drawCard(currentPlayer, state);
call    0 never executed
    #####:  659:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  660:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  661:			drawntreasure++;
        -:  662:		else{
    #####:  663:			temphand[z]=cardDrawn;
    #####:  664:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  665:			z++;
        -:  666:		}
        -:  667:	}
    #####:  668:	while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####:  669:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  670:		z=z-1;
        -:  671:	}
    #####:  672:	return 0;
        -:  673:}
        -:  674:
        -:  675:// BUG- only allows 2 cards to be drawn
function smithyCard called 1 returned 100% blocks executed 100%
        1:  676:int smithyCard(int currentPlayer, int handPos, struct gameState *state) {
        -:  677:	int i;
        -:  678:	//+3 Cards
        3:  679:	for (i = 0; i < 2; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  680:	//for (i = 0; i < 3; i++)
        -:  681:	{
        2:  682:		drawCard(currentPlayer, state);
call    0 returned 100%
        -:  683:	}
        -:  684:	
        -:  685:	//discard card from hand
        1:  686:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  687:	return 0;
        -:  688:}
        -:  689:
        -:  690:// BUG- allows only 1 action rather than 2
function villageCard called 0 returned 0% blocks executed 0%
    #####:  691:int villageCard(int currentPlayer, int handPos, struct gameState *state) {
        -:  692:	//+1 Card
    #####:  693:	drawCard(currentPlayer, state);
call    0 never executed
        -:  694:	
        -:  695:	//+2 Actions
    #####:  696:	state->numActions = state->numActions + 1;
        -:  697:	//state->numActions = state->numActions + 2;
        -:  698:	
        -:  699:	//discard played card from hand
    #####:  700:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  701:	return 0;
        -:  702:}
        -:  703:
        -:  704:// BUG- +3 cards insead of +4 cards
function council_roomCard called 0 returned 0% blocks executed 0%
    #####:  705:int council_roomCard(int currentPlayer, int handPos, struct gameState *state) {
        -:  706:	//+4 Cards
        -:  707:	int i;
    #####:  708:	for (i = 1; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  709:	//for (i = 0; i < 4; i++)
        -:  710:	{
    #####:  711:		drawCard(currentPlayer, state);
call    0 never executed
        -:  712:	}
        -:  713:
        -:  714:	//+1 Buy
    #####:  715:	state->numBuys++;
        -:  716:
        -:  717:	//Each other player draws a card
    #####:  718:	for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  719:	{
    #####:  720:		if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  721:		{
    #####:  722:			drawCard(i, state);
call    0 never executed
        -:  723:		}
        -:  724:	}
        -:  725:
        -:  726:	//put played card in played card pile
    #####:  727:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  728:
    #####:  729:	return 0;
        -:  730:}
        -:  731:
        -:  732:/*
        -:  733:int sea_hagCard(int currentPlayer, struct gameState *state) {
        -:  734:	for (int i = 0; i < state->numPlayers; i++) {
        -:  735:		if (i != currentPlayer){
        -:  736:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
        -:  737:			state->deckCount[i]--;
        -:  738:			state->discardCount[i]++;
        -:  739:			state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:  740:		}
        -:  741:	}
        -:  742:	return 0;
        -:  743:}
        -:  744:*/
        -:  745:
function embargoCard called 0 returned 0% blocks executed 0%
    #####:  746:int embargoCard(int currentPlayer, int handPos, struct gameState *state, int choice1) {
        -:  747:	//+2 Coins
    #####:  748:	state->coins = state->coins + 2;
        -:  749:	
        -:  750:	//see if selected pile is in play
    #####:  751:	if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -:  752:	{
    #####:  753:		return -1;
        -:  754:	}
        -:  755:	
        -:  756:	//add embargo token to selected supply pile
    #####:  757:	state->embargoTokens[choice1]++;
        -:  758:	
        -:  759:	//trash card
    #####:  760:	discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  761:	return 0;
        -:  762:}
        -:  763:/*********************************************************/
        -:  764:
function cardEffect called 1 returned 100% blocks executed 3%
        1:  765:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  766:{
        -:  767:  int i;
        -:  768:  int j;
        -:  769:  int k;
        -:  770:  int x;
        -:  771:  int index;
        1:  772:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        1:  773:  int nextPlayer = currentPlayer + 1;
        -:  774:
        1:  775:  int tributeRevealedCards[2] = {-1, -1};
        -:  776:  int temphand[MAX_HAND];// moved above the if statement
        -:  777:  //int drawntreasure=0;
        -:  778:  //int cardDrawn;
        1:  779:  int z = 0;// this is the counter for the temp hand
        1:  780:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  781:    nextPlayer = 0;
        -:  782:  }
        -:  783:  
        -:  784:	
        -:  785:  //uses switch to select card and perform actions
        1:  786:  switch( card ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 100%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  787:    {
        -:  788:    case adventurer:
        -:  789:/*
        -:  790:      while(drawntreasure<2){
        -:  791:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  792:	  shuffle(currentPlayer, state);
        -:  793:	}
        -:  794:	drawCard(currentPlayer, state);
        -:  795:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  796:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  797:	  drawntreasure++;
        -:  798:	else{
        -:  799:	  temphand[z]=cardDrawn;
        -:  800:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  801:	  z++;
        -:  802:	}
        -:  803:      }
        -:  804:      while(z-1>=0){
        -:  805:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  806:	z=z-1;
        -:  807:      }
        -:  808:      return 0;
        -:  809:*/
    #####:  810:			return adventurerCard(currentPlayer, temphand, state);
call    0 never executed
        -:  811:			
        -:  812:    case council_room:
        -:  813:/*
        -:  814:      //+4 Cards
        -:  815:      for (i = 0; i < 4; i++)
        -:  816:	{
        -:  817:	  drawCard(currentPlayer, state);
        -:  818:	}
        -:  819:			
        -:  820:      //+1 Buy
        -:  821:      state->numBuys++;
        -:  822:			
        -:  823:      //Each other player draws a card
        -:  824:      for (i = 0; i < state->numPlayers; i++)
        -:  825:	{
        -:  826:	  if ( i != currentPlayer )
        -:  827:	    {
        -:  828:	      drawCard(i, state);
        -:  829:	    }
        -:  830:	}
        -:  831:			
        -:  832:      //put played card in played card pile
        -:  833:      discardCard(handPos, currentPlayer, state, 0);
        -:  834:			
        -:  835:      return 0;
        -:  836:*/
    #####:  837:		return council_roomCard(currentPlayer, handPos, state);
call    0 never executed
        -:  838:			
        -:  839:    case feast:
        -:  840:      //gain card with cost up to 5
        -:  841:      //Backup hand
    #####:  842:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  843:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  844:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  845:      }
        -:  846:      //Backup hand
        -:  847:
        -:  848:      //Update Coins for Buy
    #####:  849:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  850:      x = 1;//Condition to loop on
    #####:  851:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  852:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  853:	  if (DEBUG)
        -:  854:	    printf("None of that card left, sorry!\n");
        -:  855:
        -:  856:	  if (DEBUG){
        -:  857:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  858:	  }
        -:  859:	}
    #####:  860:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  861:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  862:
        -:  863:	  if (DEBUG){
        -:  864:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  865:	  }
        -:  866:	}
        -:  867:	else{
        -:  868:
        -:  869:	  if (DEBUG){
        -:  870:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  871:	  }
        -:  872:
    #####:  873:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  874:	  x = 0;//No more buying cards
        -:  875:
        -:  876:	  if (DEBUG){
        -:  877:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  878:	  }
        -:  879:
        -:  880:	}
        -:  881:      }     
        -:  882:
        -:  883:      //Reset Hand
    #####:  884:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  885:	state->hand[currentPlayer][i] = temphand[i];
    #####:  886:	temphand[i] = -1;
        -:  887:      }
        -:  888:      //Reset Hand
        -:  889:      			
    #####:  890:      return 0;
        -:  891:			
        -:  892:    case gardens:
    #####:  893:      return -1;
        -:  894:			
        -:  895:    case mine:
    #####:  896:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  897:
    #####:  898:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  899:	{
    #####:  900:	  return -1;
        -:  901:	}
        -:  902:		
    #####:  903:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  904:	{
    #####:  905:	  return -1;
        -:  906:	}
        -:  907:
    #####:  908:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  909:	{
    #####:  910:	  return -1;
        -:  911:	}
        -:  912:
    #####:  913:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  914:
        -:  915:      //discard card from hand
    #####:  916:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  917:
        -:  918:      //discard trashed card
    #####:  919:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  920:	{
    #####:  921:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  922:	    {
    #####:  923:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  924:	      break;
        -:  925:	    }
        -:  926:	}
        -:  927:			
    #####:  928:      return 0;
        -:  929:			
        -:  930:    case remodel:
    #####:  931:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  932:
    #####:  933:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  934:	{
    #####:  935:	  return -1;
        -:  936:	}
        -:  937:
    #####:  938:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  939:
        -:  940:      //discard card from hand
    #####:  941:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  942:
        -:  943:      //discard trashed card
    #####:  944:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  945:	{
    #####:  946:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  947:	    {
    #####:  948:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  949:	      break;
        -:  950:	    }
        -:  951:	}
        -:  952:
        -:  953:
    #####:  954:      return 0;
        -:  955:		
        -:  956:    case smithy:
        -:  957:/*
        -:  958:	  //+3 Cards
        -:  959:      for (i = 0; i < 3; i++)
        -:  960:	{
        -:  961:	  drawCard(currentPlayer, state);
        -:  962:	}
        -:  963:			
        -:  964:      //discard card from hand
        -:  965:      discardCard(handPos, currentPlayer, state, 0);
        -:  966:      return 0;
        -:  967: */
        1:  968:		return smithyCard(currentPlayer, handPos, state);
call    0 returned 100%
        -:  969:		
        -:  970:    case village:
        -:  971:/*
        -:  972:      //+1 Card
        -:  973:      drawCard(currentPlayer, state);
        -:  974:			
        -:  975:      //+2 Actions
        -:  976:      state->numActions = state->numActions + 2;
        -:  977:			
        -:  978:      //discard played card from hand
        -:  979:      discardCard(handPos, currentPlayer, state, 0);
        -:  980:      return 0;
        -:  981:*/
    #####:  982:		return villageCard(currentPlayer, handPos, state);
call    0 never executed
        -:  983:			
        -:  984:    case baron:
    #####:  985:      state->numBuys++;//Increase buys by 1!
    #####:  986:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  987:	int p = 0;//Iterator for hand!
    #####:  988:	int card_not_discarded = 1;//Flag for discard set!
    #####:  989:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  990:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  991:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  992:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  993:	    state->discardCount[currentPlayer]++;
    #####:  994:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  995:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  996:	    }
    #####:  997:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  998:	    state->handCount[currentPlayer]--;
    #####:  999:	    card_not_discarded = 0;//Exit the loop
        -: 1000:	  }
    #####: 1001:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1002:	    if(DEBUG) {
        -: 1003:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1004:	      printf("Must gain an estate if there are any\n");
        -: 1005:	    }
    #####: 1006:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1007:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1008:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1009:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1010:		isGameOver(state);
call    0 never executed
        -: 1011:	      }
        -: 1012:	    }
    #####: 1013:	    card_not_discarded = 0;//Exit the loop
        -: 1014:	  }
        -: 1015:			    
        -: 1016:	  else{
    #####: 1017:	    p++;//Next card
        -: 1018:	  }
        -: 1019:	}
        -: 1020:      }
        -: 1021:			    
        -: 1022:      else{
    #####: 1023:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1024:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1025:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1026:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1027:	    isGameOver(state);
call    0 never executed
        -: 1028:	  }
        -: 1029:	}
        -: 1030:      }
        -: 1031:	    
        -: 1032:      
    #####: 1033:      return 0;
        -: 1034:		
        -: 1035:    case great_hall:
        -: 1036:      //+1 Card
    #####: 1037:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1038:			
        -: 1039:      //+1 Actions
    #####: 1040:      state->numActions++;
        -: 1041:			
        -: 1042:      //discard card from hand
    #####: 1043:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1044:      return 0;
        -: 1045:		
        -: 1046:    case minion:
        -: 1047:      //+1 action
    #####: 1048:      state->numActions++;
        -: 1049:			
        -: 1050:      //discard card from hand
    #####: 1051:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1052:			
    #####: 1053:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1054:	{
    #####: 1055:	  state->coins = state->coins + 2;
        -: 1056:	}
        -: 1057:			
    #####: 1058:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1059:	{
        -: 1060:	  //discard hand
    #####: 1061:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1062:	    {
    #####: 1063:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1064:	    }
        -: 1065:				
        -: 1066:	  //draw 4
    #####: 1067:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1068:	    {
    #####: 1069:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1070:	    }
        -: 1071:				
        -: 1072:	  //other players discard hand and redraw if hand size > 4
    #####: 1073:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1074:	    {
    #####: 1075:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1076:		{
    #####: 1077:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1078:		    {
        -: 1079:		      //discard hand
    #####: 1080:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1081:			{
    #####: 1082:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1083:			}
        -: 1084:							
        -: 1085:		      //draw 4
    #####: 1086:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1087:			{
    #####: 1088:			  drawCard(i, state);
call    0 never executed
        -: 1089:			}
        -: 1090:		    }
        -: 1091:		}
        -: 1092:	    }
        -: 1093:				
        -: 1094:	}
    #####: 1095:      return 0;
        -: 1096:		
        -: 1097:    case steward:
    #####: 1098:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1099:	{
        -: 1100:	  //+2 cards
    #####: 1101:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1102:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1103:	}
    #####: 1104:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1105:	{
        -: 1106:	  //+2 coins
    #####: 1107:	  state->coins = state->coins + 2;
        -: 1108:	}
        -: 1109:      else
        -: 1110:	{
        -: 1111:	  //trash 2 cards in hand
    #####: 1112:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1113:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1114:	}
        -: 1115:			
        -: 1116:      //discard card from hand
    #####: 1117:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1118:      return 0;
        -: 1119:		
        -: 1120:    case tribute:
    #####: 1121:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1122:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1123:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1124:	  state->deckCount[nextPlayer]--;
        -: 1125:	}
    #####: 1126:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1127:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1128:	  state->discardCount[nextPlayer]--;
        -: 1129:	}
        -: 1130:	else{
        -: 1131:	  //No Card to Reveal
        -: 1132:	  if (DEBUG){
        -: 1133:	    printf("No cards to reveal\n");
        -: 1134:	  }
        -: 1135:	}
        -: 1136:      }
        -: 1137:	    
        -: 1138:      else{
    #####: 1139:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1140:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1141:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1142:	    state->deckCount[nextPlayer]++;
    #####: 1143:	    state->discard[nextPlayer][i] = -1;
    #####: 1144:	    state->discardCount[nextPlayer]--;
        -: 1145:	  }
        -: 1146:			    
    #####: 1147:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1148:	} 
    #####: 1149:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1150:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1151:	state->deckCount[nextPlayer]--;
    #####: 1152:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1153:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1154:	state->deckCount[nextPlayer]--;
        -: 1155:      }    
        -: 1156:		       
    #####: 1157:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1158:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1159:	state->playedCardCount++;
    #####: 1160:	tributeRevealedCards[1] = -1;
        -: 1161:      }
        -: 1162:
    #####: 1163:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1164:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1165:	  state->coins += 2;
        -: 1166:	}
        -: 1167:		    
    #####: 1168:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1169:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1170:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1171:	}
        -: 1172:	else{//Action Card
    #####: 1173:	  state->numActions = state->numActions + 2;
        -: 1174:	}
        -: 1175:      }
        -: 1176:	    
    #####: 1177:      return 0;
        -: 1178:		
        -: 1179:    case ambassador:
    #####: 1180:      j = 0;		//used to check if player has enough cards to discard
        -: 1181:
    #####: 1182:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1183:	{
    #####: 1184:	  return -1;				
        -: 1185:	}
        -: 1186:
    #####: 1187:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1188:	{
    #####: 1189:	  return -1;
        -: 1190:	}
        -: 1191:
    #####: 1192:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1193:	{
    #####: 1194:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1195:	    {
    #####: 1196:	      j++;
        -: 1197:	    }
        -: 1198:	}
    #####: 1199:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1200:	{
    #####: 1201:	  return -1;				
        -: 1202:	}
        -: 1203:
        -: 1204:      if (DEBUG) 
        -: 1205:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1206:
        -: 1207:      //increase supply count for choosen card by amount being discarded
    #####: 1208:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1209:			
        -: 1210:      //each other player gains a copy of revealed card
    #####: 1211:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1212:	{
    #####: 1213:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1214:	    {
    #####: 1215:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1216:	    }
        -: 1217:	}
        -: 1218:
        -: 1219:      //discard played card from hand
    #####: 1220:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1221:
        -: 1222:      //trash copies of cards returned to supply
    #####: 1223:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1224:	{
    #####: 1225:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1226:	    {
    #####: 1227:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1228:		{
    #####: 1229:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1230:		  break;
        -: 1231:		}
        -: 1232:	    }
        -: 1233:	}			
        -: 1234:
    #####: 1235:      return 0;
        -: 1236:		
        -: 1237:    case cutpurse:
        -: 1238:
    #####: 1239:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1240:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1241:	{
    #####: 1242:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1243:	    {
    #####: 1244:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1245:		{
    #####: 1246:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1247:		    {
    #####: 1248:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1249:		      break;
        -: 1250:		    }
    #####: 1251:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1252:		    {
    #####: 1253:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1254:			{
        -: 1255:			  if (DEBUG)
        -: 1256:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1257:			}	
    #####: 1258:		      break;
        -: 1259:		    }		
        -: 1260:		}
        -: 1261:					
        -: 1262:	    }
        -: 1263:				
        -: 1264:	}				
        -: 1265:
        -: 1266:      //discard played card from hand
    #####: 1267:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1268:
    #####: 1269:      return 0;
        -: 1270:
        -: 1271:		
        -: 1272:    case embargo:
        -: 1273:/*
        -: 1274:      //+2 Coins
        -: 1275:      state->coins = state->coins + 2;
        -: 1276:			
        -: 1277:      //see if selected pile is in play
        -: 1278:      if ( state->supplyCount[choice1] == -1 )
        -: 1279:	{
        -: 1280:	  return -1;
        -: 1281:	}
        -: 1282: 
        -: 1283:      //add embargo token to selected supply pile
        -: 1284:      state->embargoTokens[choice1]++;
        -: 1285:			
        -: 1286:      //trash card
        -: 1287:      discardCard(handPos, currentPlayer, state, 1);		
        -: 1288:      return 0;
        -: 1289: */
    #####: 1290:		return embargoCard(currentPlayer, handPos, state, choice1);
call    0 never executed
        -: 1291:			
        -: 1292:    case outpost:
        -: 1293:      //set outpost flag
    #####: 1294:      state->outpostPlayed++;
        -: 1295:			
        -: 1296:      //discard card
    #####: 1297:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1298:      return 0;
        -: 1299:		
        -: 1300:    case salvager:
        -: 1301:      //+1 buy
    #####: 1302:      state->numBuys++;
        -: 1303:			
    #####: 1304:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1305:	{
        -: 1306:	  //gain coins equal to trashed card
    #####: 1307:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1308:	  //trash card
    #####: 1309:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1310:	}
        -: 1311:			
        -: 1312:      //discard card
    #####: 1313:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1314:      return 0;
        -: 1315:		
        -: 1316:    case sea_hag:
        -: 1317:
    #####: 1318:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1319:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1320:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1321:	  state->discardCount[i]++;
    #####: 1322:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1323:	}
        -: 1324:      }
    #####: 1325:      return 0;
        -: 1326:
        -: 1327:		//return sea_hagCard(currentPlayer, state);
        -: 1328:			
        -: 1329:    case treasure_map:
        -: 1330:      //search hand for another treasure_map
    #####: 1331:      index = -1;
    #####: 1332:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1333:	{
    #####: 1334:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1335:	    {
    #####: 1336:	      index = i;
    #####: 1337:	      break;
        -: 1338:	    }
        -: 1339:	}
    #####: 1340:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1341:	{
        -: 1342:	  //trash both treasure cards
    #####: 1343:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1344:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1345:
        -: 1346:	  //gain 4 Gold cards
    #####: 1347:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1348:	    {
    #####: 1349:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1350:	    }
        -: 1351:				
        -: 1352:	  //return success
    #####: 1353:	  return 1;
        -: 1354:	}
        -: 1355:			
        -: 1356:      //no second treasure_map found in hand
    #####: 1357:      return -1;
        -: 1358:    }
        -: 1359:	
    #####: 1360:  return -1;
        -: 1361:}
        -: 1362:
function discardCard called 1 returned 100% blocks executed 78%
        1: 1363:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1364:{
        -: 1365:	
        -: 1366:  //if card is not trashed, added to Played pile 
        1: 1367:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1368:    {
        -: 1369:      //add card to played pile
        1: 1370:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        1: 1371:      state->playedCardCount++;
        -: 1372:    }
        -: 1373:	
        -: 1374:  //set played card to -1
        1: 1375:  state->hand[currentPlayer][handPos] = -1;
        -: 1376:	
        -: 1377:  //remove card from player's hand
        1: 1378:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1379:    {
        -: 1380:      //reduce number of cards in hand
    #####: 1381:      state->handCount[currentPlayer]--;
        -: 1382:    }
        1: 1383:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1384:    {
        -: 1385:      //reduce number of cards in hand
    #####: 1386:      state->handCount[currentPlayer]--;
        -: 1387:    }
        -: 1388:  else 	
        -: 1389:    {
        -: 1390:      //replace discarded card with last card in hand
        1: 1391:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1392:      //set last card to -1
        1: 1393:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1394:      //reduce number of cards in hand
        1: 1395:      state->handCount[currentPlayer]--;
        -: 1396:    }
        -: 1397:	
        1: 1398:  return 0;
        -: 1399:}
        -: 1400:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1401:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1402:{
        -: 1403:  //Note: supplyPos is enum of choosen card
        -: 1404:	
        -: 1405:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1406:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1407:    {
    #####: 1408:      return -1;
        -: 1409:    }
        -: 1410:	
        -: 1411:  //added card for [whoseTurn] current player:
        -: 1412:  // toFlag = 0 : add to discard
        -: 1413:  // toFlag = 1 : add to deck
        -: 1414:  // toFlag = 2 : add to hand
        -: 1415:
    #####: 1416:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1417:    {
    #####: 1418:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1419:      state->deckCount[player]++;
        -: 1420:    }
    #####: 1421:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1422:    {
    #####: 1423:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1424:      state->handCount[player]++;
        -: 1425:    }
        -: 1426:  else
        -: 1427:    {
    #####: 1428:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1429:      state->discardCount[player]++;
        -: 1430:    }
        -: 1431:	
        -: 1432:  //decrease number in supply pile
    #####: 1433:  state->supplyCount[supplyPos]--;
        -: 1434:	 
    #####: 1435:  return 0;
        -: 1436:}
        -: 1437:
function updateCoins called 1 returned 100% blocks executed 82%
        1: 1438:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1439:{
        -: 1440:  int i;
        -: 1441:	
        -: 1442:  //reset coin count
        1: 1443:  state->coins = 0;
        -: 1444:
        -: 1445:  //add coins for each Treasure card in player's hand
        6: 1446:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1447:    {
        5: 1448:      if (state->hand[player][i] == copper)
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
        -: 1449:	{
        3: 1450:	  state->coins += 1;
        -: 1451:	}
        2: 1452:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1453:	{
    #####: 1454:	  state->coins += 2;
        -: 1455:	}
        2: 1456:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1457:	{
    #####: 1458:	  state->coins += 3;
        -: 1459:	}	
        -: 1460:    }	
        -: 1461:
        -: 1462:  //add bonus
        1: 1463:  state->coins += bonus;
        -: 1464:
        1: 1465:  return 0;
        -: 1466:}
        -: 1467:
        -: 1468:
        -: 1469://end of dominion.c
        -: 1470:
cardtest2.c
***** Testing adventurerCard()... *****
Testing Player 0 Adventurer +2 hand count...
Test PASSED
Test if player has 2 additional treasure cards...Test FAILED
Player does not have 2 additional Treasure Cards. Expected 5 Actual 4
Testing Player 0 score unchanged...
Test PASSED
Testing Player 1 score unchanged...
Test PASSED
Testing Player 1 hand count unchanged...
Test PASSED
Testing Player 1 deck count unchanged...
Test PASSED
Testing Victory Card Piles unchanged...
Estate Card Pile...
Test PASSED
Province Card Pile...
Test PASSED
Duchy Card Pile...
Test PASSED
Testing Kingdom Card Piles unchanged...
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test PASSED
***** adventurerCard() Tests Complete *****

Processing file 1 out of 1
File 'dominion.c'
Lines executed:24.87% of 559
Branches executed:29.50% of 417
Taken at least once:18.47% of 417
Calls executed:13.68% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:2
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 60 returned 100% blocks executed 83%
       60:    8:int compare(const void* a, const void* b) {
       60:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
       60:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       16:   12:    return -1;
       44:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 2 returned 100% blocks executed 88%
        2:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        2:   44:  SelectStream(1);
call    0 returned 100%
        2:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
        2:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        2:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       22:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      220:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      200:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        2:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        2:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        2:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        2:   89:      state->supplyCount[estate] = 8;
        2:   90:      state->supplyCount[duchy] = 8;
        2:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        2:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        2:  102:  state->supplyCount[silver] = 40;
        2:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       42:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
      330:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
      310:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       20:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:		{
        4:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       18:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       20:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      290:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        6:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
        4:  140:      state->deckCount[i] = 0;
       16:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       12:  143:	  state->deck[i][j] = estate;
       12:  144:	  state->deckCount[i]++;
        -:  145:	}
       32:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       28:  148:	  state->deck[i][j] = copper;
       28:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        6:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
        4:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        6:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        4:  166:      state->handCount[i] = 0;
        4:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
       56:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
       54:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        2:  182:  state->outpostPlayed = 0;
        2:  183:  state->phase = 0;
        2:  184:  state->numActions = 1;
        2:  185:  state->numBuys = 1;
        2:  186:  state->playedCardCount = 0;
        2:  187:  state->whoseTurn = 0;
        2:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       12:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       10:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        2:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        2:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 4 returned 100% blocks executed 94%
        4:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        4:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        4:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
        4:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       48:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       40:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
       40:  216:    newDeck[newDeckPos] = state->deck[player][card];
       40:  217:    newDeckPos++;
      126:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 68%
branch  1 taken 32% (fallthrough)
       86:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       40:  221:    state->deckCount[player]--;
        -:  222:  }
       44:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       40:  224:    state->deck[player][i] = newDeck[i];
       40:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        4:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 2 returned 100% blocks executed 100%
        2:  346:int whoseTurn(struct gameState *state) {
        2:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 8 returned 100% blocks executed 32%
        8:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
        8:  420:  int score = 0;
        -:  421:  //score from hand
       30:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 73%
branch  1 taken 27% (fallthrough)
        -:  423:    {
       22:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       22:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
       22:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       22:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       22:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       22:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
        8:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
        8:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
        8:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 13 returned 100% blocks executed 38%
       13:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       13:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       13:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       13:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       13:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       13:  576:    state->deckCount[player]--;
       13:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       13:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:/*************** REFACTORED CARDS ****************/
        -:  647:// BUG- drawntreasure = 1 instead of 0
function adventurerCard called 1 returned 100% blocks executed 67%
        1:  648:int adventurerCard(int currentPlayer, int temphand[], struct gameState *state) {
        -:  649:	//int drawntreasure=0;
        1:  650:	int drawntreasure=1;
        -:  651:	int cardDrawn;
        1:  652:	int z=0;
        -:  653:	
        3:  654:	while(drawntreasure<2){
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        1:  655:		if (state->deckCount[currentPlayer] < 1){ //if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  656:		shuffle(currentPlayer, state);
call    0 never executed
        -:  657:		}
        1:  658:		drawCard(currentPlayer, state);
call    0 returned 100%
        1:  659:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        1:  660:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        1:  661:			drawntreasure++;
        -:  662:		else{
    #####:  663:			temphand[z]=cardDrawn;
    #####:  664:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  665:			z++;
        -:  666:		}
        -:  667:	}
        2:  668:	while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  669:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  670:		z=z-1;
        -:  671:	}
        1:  672:	return 0;
        -:  673:}
        -:  674:
        -:  675:// BUG- only allows 2 cards to be drawn
function smithyCard called 1 returned 100% blocks executed 100%
        1:  676:int smithyCard(int currentPlayer, int handPos, struct gameState *state) {
        -:  677:	int i;
        -:  678:	//+3 Cards
        3:  679:	for (i = 0; i < 2; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  680:	//for (i = 0; i < 3; i++)
        -:  681:	{
        2:  682:		drawCard(currentPlayer, state);
call    0 returned 100%
        -:  683:	}
        -:  684:	
        -:  685:	//discard card from hand
        1:  686:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  687:	return 0;
        -:  688:}
        -:  689:
        -:  690:// BUG- allows only 1 action rather than 2
function villageCard called 0 returned 0% blocks executed 0%
    #####:  691:int villageCard(int currentPlayer, int handPos, struct gameState *state) {
        -:  692:	//+1 Card
    #####:  693:	drawCard(currentPlayer, state);
call    0 never executed
        -:  694:	
        -:  695:	//+2 Actions
    #####:  696:	state->numActions = state->numActions + 1;
        -:  697:	//state->numActions = state->numActions + 2;
        -:  698:	
        -:  699:	//discard played card from hand
    #####:  700:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  701:	return 0;
        -:  702:}
        -:  703:
        -:  704:// BUG- +3 cards insead of +4 cards
function council_roomCard called 0 returned 0% blocks executed 0%
    #####:  705:int council_roomCard(int currentPlayer, int handPos, struct gameState *state) {
        -:  706:	//+4 Cards
        -:  707:	int i;
    #####:  708:	for (i = 1; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  709:	//for (i = 0; i < 4; i++)
        -:  710:	{
    #####:  711:		drawCard(currentPlayer, state);
call    0 never executed
        -:  712:	}
        -:  713:
        -:  714:	//+1 Buy
    #####:  715:	state->numBuys++;
        -:  716:
        -:  717:	//Each other player draws a card
    #####:  718:	for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  719:	{
    #####:  720:		if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  721:		{
    #####:  722:			drawCard(i, state);
call    0 never executed
        -:  723:		}
        -:  724:	}
        -:  725:
        -:  726:	//put played card in played card pile
    #####:  727:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  728:
    #####:  729:	return 0;
        -:  730:}
        -:  731:
        -:  732:/*
        -:  733:int sea_hagCard(int currentPlayer, struct gameState *state) {
        -:  734:	for (int i = 0; i < state->numPlayers; i++) {
        -:  735:		if (i != currentPlayer){
        -:  736:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
        -:  737:			state->deckCount[i]--;
        -:  738:			state->discardCount[i]++;
        -:  739:			state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:  740:		}
        -:  741:	}
        -:  742:	return 0;
        -:  743:}
        -:  744:*/
        -:  745:
function embargoCard called 0 returned 0% blocks executed 0%
    #####:  746:int embargoCard(int currentPlayer, int handPos, struct gameState *state, int choice1) {
        -:  747:	//+2 Coins
    #####:  748:	state->coins = state->coins + 2;
        -:  749:	
        -:  750:	//see if selected pile is in play
    #####:  751:	if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -:  752:	{
    #####:  753:		return -1;
        -:  754:	}
        -:  755:	
        -:  756:	//add embargo token to selected supply pile
    #####:  757:	state->embargoTokens[choice1]++;
        -:  758:	
        -:  759:	//trash card
    #####:  760:	discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  761:	return 0;
        -:  762:}
        -:  763:/*********************************************************/
        -:  764:
function cardEffect called 2 returned 100% blocks executed 3%
        2:  765:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  766:{
        -:  767:  int i;
        -:  768:  int j;
        -:  769:  int k;
        -:  770:  int x;
        -:  771:  int index;
        2:  772:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        2:  773:  int nextPlayer = currentPlayer + 1;
        -:  774:
        2:  775:  int tributeRevealedCards[2] = {-1, -1};
        -:  776:  int temphand[MAX_HAND];// moved above the if statement
        -:  777:  //int drawntreasure=0;
        -:  778:  //int cardDrawn;
        2:  779:  int z = 0;// this is the counter for the temp hand
        2:  780:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  781:    nextPlayer = 0;
        -:  782:  }
        -:  783:  
        -:  784:	
        -:  785:  //uses switch to select card and perform actions
        2:  786:  switch( card ) 
branch  0 taken 50%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 50%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  787:    {
        -:  788:    case adventurer:
        -:  789:/*
        -:  790:      while(drawntreasure<2){
        -:  791:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  792:	  shuffle(currentPlayer, state);
        -:  793:	}
        -:  794:	drawCard(currentPlayer, state);
        -:  795:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  796:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  797:	  drawntreasure++;
        -:  798:	else{
        -:  799:	  temphand[z]=cardDrawn;
        -:  800:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  801:	  z++;
        -:  802:	}
        -:  803:      }
        -:  804:      while(z-1>=0){
        -:  805:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  806:	z=z-1;
        -:  807:      }
        -:  808:      return 0;
        -:  809:*/
        1:  810:			return adventurerCard(currentPlayer, temphand, state);
call    0 returned 100%
        -:  811:			
        -:  812:    case council_room:
        -:  813:/*
        -:  814:      //+4 Cards
        -:  815:      for (i = 0; i < 4; i++)
        -:  816:	{
        -:  817:	  drawCard(currentPlayer, state);
        -:  818:	}
        -:  819:			
        -:  820:      //+1 Buy
        -:  821:      state->numBuys++;
        -:  822:			
        -:  823:      //Each other player draws a card
        -:  824:      for (i = 0; i < state->numPlayers; i++)
        -:  825:	{
        -:  826:	  if ( i != currentPlayer )
        -:  827:	    {
        -:  828:	      drawCard(i, state);
        -:  829:	    }
        -:  830:	}
        -:  831:			
        -:  832:      //put played card in played card pile
        -:  833:      discardCard(handPos, currentPlayer, state, 0);
        -:  834:			
        -:  835:      return 0;
        -:  836:*/
    #####:  837:		return council_roomCard(currentPlayer, handPos, state);
call    0 never executed
        -:  838:			
        -:  839:    case feast:
        -:  840:      //gain card with cost up to 5
        -:  841:      //Backup hand
    #####:  842:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  843:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  844:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  845:      }
        -:  846:      //Backup hand
        -:  847:
        -:  848:      //Update Coins for Buy
    #####:  849:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  850:      x = 1;//Condition to loop on
    #####:  851:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  852:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  853:	  if (DEBUG)
        -:  854:	    printf("None of that card left, sorry!\n");
        -:  855:
        -:  856:	  if (DEBUG){
        -:  857:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  858:	  }
        -:  859:	}
    #####:  860:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  861:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  862:
        -:  863:	  if (DEBUG){
        -:  864:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  865:	  }
        -:  866:	}
        -:  867:	else{
        -:  868:
        -:  869:	  if (DEBUG){
        -:  870:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  871:	  }
        -:  872:
    #####:  873:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  874:	  x = 0;//No more buying cards
        -:  875:
        -:  876:	  if (DEBUG){
        -:  877:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  878:	  }
        -:  879:
        -:  880:	}
        -:  881:      }     
        -:  882:
        -:  883:      //Reset Hand
    #####:  884:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  885:	state->hand[currentPlayer][i] = temphand[i];
    #####:  886:	temphand[i] = -1;
        -:  887:      }
        -:  888:      //Reset Hand
        -:  889:      			
    #####:  890:      return 0;
        -:  891:			
        -:  892:    case gardens:
    #####:  893:      return -1;
        -:  894:			
        -:  895:    case mine:
    #####:  896:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  897:
    #####:  898:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  899:	{
    #####:  900:	  return -1;
        -:  901:	}
        -:  902:		
    #####:  903:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  904:	{
    #####:  905:	  return -1;
        -:  906:	}
        -:  907:
    #####:  908:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  909:	{
    #####:  910:	  return -1;
        -:  911:	}
        -:  912:
    #####:  913:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  914:
        -:  915:      //discard card from hand
    #####:  916:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  917:
        -:  918:      //discard trashed card
    #####:  919:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  920:	{
    #####:  921:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  922:	    {
    #####:  923:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  924:	      break;
        -:  925:	    }
        -:  926:	}
        -:  927:			
    #####:  928:      return 0;
        -:  929:			
        -:  930:    case remodel:
    #####:  931:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  932:
    #####:  933:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  934:	{
    #####:  935:	  return -1;
        -:  936:	}
        -:  937:
    #####:  938:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  939:
        -:  940:      //discard card from hand
    #####:  941:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  942:
        -:  943:      //discard trashed card
    #####:  944:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  945:	{
    #####:  946:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  947:	    {
    #####:  948:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  949:	      break;
        -:  950:	    }
        -:  951:	}
        -:  952:
        -:  953:
    #####:  954:      return 0;
        -:  955:		
        -:  956:    case smithy:
        -:  957:/*
        -:  958:	  //+3 Cards
        -:  959:      for (i = 0; i < 3; i++)
        -:  960:	{
        -:  961:	  drawCard(currentPlayer, state);
        -:  962:	}
        -:  963:			
        -:  964:      //discard card from hand
        -:  965:      discardCard(handPos, currentPlayer, state, 0);
        -:  966:      return 0;
        -:  967: */
        1:  968:		return smithyCard(currentPlayer, handPos, state);
call    0 returned 100%
        -:  969:		
        -:  970:    case village:
        -:  971:/*
        -:  972:      //+1 Card
        -:  973:      drawCard(currentPlayer, state);
        -:  974:			
        -:  975:      //+2 Actions
        -:  976:      state->numActions = state->numActions + 2;
        -:  977:			
        -:  978:      //discard played card from hand
        -:  979:      discardCard(handPos, currentPlayer, state, 0);
        -:  980:      return 0;
        -:  981:*/
    #####:  982:		return villageCard(currentPlayer, handPos, state);
call    0 never executed
        -:  983:			
        -:  984:    case baron:
    #####:  985:      state->numBuys++;//Increase buys by 1!
    #####:  986:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  987:	int p = 0;//Iterator for hand!
    #####:  988:	int card_not_discarded = 1;//Flag for discard set!
    #####:  989:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  990:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  991:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  992:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  993:	    state->discardCount[currentPlayer]++;
    #####:  994:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  995:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  996:	    }
    #####:  997:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  998:	    state->handCount[currentPlayer]--;
    #####:  999:	    card_not_discarded = 0;//Exit the loop
        -: 1000:	  }
    #####: 1001:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1002:	    if(DEBUG) {
        -: 1003:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1004:	      printf("Must gain an estate if there are any\n");
        -: 1005:	    }
    #####: 1006:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1007:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1008:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1009:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1010:		isGameOver(state);
call    0 never executed
        -: 1011:	      }
        -: 1012:	    }
    #####: 1013:	    card_not_discarded = 0;//Exit the loop
        -: 1014:	  }
        -: 1015:			    
        -: 1016:	  else{
    #####: 1017:	    p++;//Next card
        -: 1018:	  }
        -: 1019:	}
        -: 1020:      }
        -: 1021:			    
        -: 1022:      else{
    #####: 1023:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1024:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1025:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1026:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1027:	    isGameOver(state);
call    0 never executed
        -: 1028:	  }
        -: 1029:	}
        -: 1030:      }
        -: 1031:	    
        -: 1032:      
    #####: 1033:      return 0;
        -: 1034:		
        -: 1035:    case great_hall:
        -: 1036:      //+1 Card
    #####: 1037:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1038:			
        -: 1039:      //+1 Actions
    #####: 1040:      state->numActions++;
        -: 1041:			
        -: 1042:      //discard card from hand
    #####: 1043:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1044:      return 0;
        -: 1045:		
        -: 1046:    case minion:
        -: 1047:      //+1 action
    #####: 1048:      state->numActions++;
        -: 1049:			
        -: 1050:      //discard card from hand
    #####: 1051:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1052:			
    #####: 1053:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1054:	{
    #####: 1055:	  state->coins = state->coins + 2;
        -: 1056:	}
        -: 1057:			
    #####: 1058:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1059:	{
        -: 1060:	  //discard hand
    #####: 1061:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1062:	    {
    #####: 1063:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1064:	    }
        -: 1065:				
        -: 1066:	  //draw 4
    #####: 1067:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1068:	    {
    #####: 1069:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1070:	    }
        -: 1071:				
        -: 1072:	  //other players discard hand and redraw if hand size > 4
    #####: 1073:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1074:	    {
    #####: 1075:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1076:		{
    #####: 1077:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1078:		    {
        -: 1079:		      //discard hand
    #####: 1080:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1081:			{
    #####: 1082:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1083:			}
        -: 1084:							
        -: 1085:		      //draw 4
    #####: 1086:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1087:			{
    #####: 1088:			  drawCard(i, state);
call    0 never executed
        -: 1089:			}
        -: 1090:		    }
        -: 1091:		}
        -: 1092:	    }
        -: 1093:				
        -: 1094:	}
    #####: 1095:      return 0;
        -: 1096:		
        -: 1097:    case steward:
    #####: 1098:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1099:	{
        -: 1100:	  //+2 cards
    #####: 1101:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1102:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1103:	}
    #####: 1104:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1105:	{
        -: 1106:	  //+2 coins
    #####: 1107:	  state->coins = state->coins + 2;
        -: 1108:	}
        -: 1109:      else
        -: 1110:	{
        -: 1111:	  //trash 2 cards in hand
    #####: 1112:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1113:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1114:	}
        -: 1115:			
        -: 1116:      //discard card from hand
    #####: 1117:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1118:      return 0;
        -: 1119:		
        -: 1120:    case tribute:
    #####: 1121:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1122:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1123:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1124:	  state->deckCount[nextPlayer]--;
        -: 1125:	}
    #####: 1126:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1127:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1128:	  state->discardCount[nextPlayer]--;
        -: 1129:	}
        -: 1130:	else{
        -: 1131:	  //No Card to Reveal
        -: 1132:	  if (DEBUG){
        -: 1133:	    printf("No cards to reveal\n");
        -: 1134:	  }
        -: 1135:	}
        -: 1136:      }
        -: 1137:	    
        -: 1138:      else{
    #####: 1139:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1140:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1141:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1142:	    state->deckCount[nextPlayer]++;
    #####: 1143:	    state->discard[nextPlayer][i] = -1;
    #####: 1144:	    state->discardCount[nextPlayer]--;
        -: 1145:	  }
        -: 1146:			    
    #####: 1147:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1148:	} 
    #####: 1149:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1150:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1151:	state->deckCount[nextPlayer]--;
    #####: 1152:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1153:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1154:	state->deckCount[nextPlayer]--;
        -: 1155:      }    
        -: 1156:		       
    #####: 1157:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1158:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1159:	state->playedCardCount++;
    #####: 1160:	tributeRevealedCards[1] = -1;
        -: 1161:      }
        -: 1162:
    #####: 1163:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1164:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1165:	  state->coins += 2;
        -: 1166:	}
        -: 1167:		    
    #####: 1168:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1169:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1170:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1171:	}
        -: 1172:	else{//Action Card
    #####: 1173:	  state->numActions = state->numActions + 2;
        -: 1174:	}
        -: 1175:      }
        -: 1176:	    
    #####: 1177:      return 0;
        -: 1178:		
        -: 1179:    case ambassador:
    #####: 1180:      j = 0;		//used to check if player has enough cards to discard
        -: 1181:
    #####: 1182:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1183:	{
    #####: 1184:	  return -1;				
        -: 1185:	}
        -: 1186:
    #####: 1187:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1188:	{
    #####: 1189:	  return -1;
        -: 1190:	}
        -: 1191:
    #####: 1192:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1193:	{
    #####: 1194:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1195:	    {
    #####: 1196:	      j++;
        -: 1197:	    }
        -: 1198:	}
    #####: 1199:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1200:	{
    #####: 1201:	  return -1;				
        -: 1202:	}
        -: 1203:
        -: 1204:      if (DEBUG) 
        -: 1205:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1206:
        -: 1207:      //increase supply count for choosen card by amount being discarded
    #####: 1208:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1209:			
        -: 1210:      //each other player gains a copy of revealed card
    #####: 1211:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1212:	{
    #####: 1213:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1214:	    {
    #####: 1215:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1216:	    }
        -: 1217:	}
        -: 1218:
        -: 1219:      //discard played card from hand
    #####: 1220:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1221:
        -: 1222:      //trash copies of cards returned to supply
    #####: 1223:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1224:	{
    #####: 1225:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1226:	    {
    #####: 1227:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1228:		{
    #####: 1229:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1230:		  break;
        -: 1231:		}
        -: 1232:	    }
        -: 1233:	}			
        -: 1234:
    #####: 1235:      return 0;
        -: 1236:		
        -: 1237:    case cutpurse:
        -: 1238:
    #####: 1239:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1240:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1241:	{
    #####: 1242:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1243:	    {
    #####: 1244:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1245:		{
    #####: 1246:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1247:		    {
    #####: 1248:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1249:		      break;
        -: 1250:		    }
    #####: 1251:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1252:		    {
    #####: 1253:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1254:			{
        -: 1255:			  if (DEBUG)
        -: 1256:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1257:			}	
    #####: 1258:		      break;
        -: 1259:		    }		
        -: 1260:		}
        -: 1261:					
        -: 1262:	    }
        -: 1263:				
        -: 1264:	}				
        -: 1265:
        -: 1266:      //discard played card from hand
    #####: 1267:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1268:
    #####: 1269:      return 0;
        -: 1270:
        -: 1271:		
        -: 1272:    case embargo:
        -: 1273:/*
        -: 1274:      //+2 Coins
        -: 1275:      state->coins = state->coins + 2;
        -: 1276:			
        -: 1277:      //see if selected pile is in play
        -: 1278:      if ( state->supplyCount[choice1] == -1 )
        -: 1279:	{
        -: 1280:	  return -1;
        -: 1281:	}
        -: 1282: 
        -: 1283:      //add embargo token to selected supply pile
        -: 1284:      state->embargoTokens[choice1]++;
        -: 1285:			
        -: 1286:      //trash card
        -: 1287:      discardCard(handPos, currentPlayer, state, 1);		
        -: 1288:      return 0;
        -: 1289: */
    #####: 1290:		return embargoCard(currentPlayer, handPos, state, choice1);
call    0 never executed
        -: 1291:			
        -: 1292:    case outpost:
        -: 1293:      //set outpost flag
    #####: 1294:      state->outpostPlayed++;
        -: 1295:			
        -: 1296:      //discard card
    #####: 1297:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1298:      return 0;
        -: 1299:		
        -: 1300:    case salvager:
        -: 1301:      //+1 buy
    #####: 1302:      state->numBuys++;
        -: 1303:			
    #####: 1304:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1305:	{
        -: 1306:	  //gain coins equal to trashed card
    #####: 1307:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1308:	  //trash card
    #####: 1309:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1310:	}
        -: 1311:			
        -: 1312:      //discard card
    #####: 1313:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1314:      return 0;
        -: 1315:		
        -: 1316:    case sea_hag:
        -: 1317:
    #####: 1318:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1319:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1320:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1321:	  state->discardCount[i]++;
    #####: 1322:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1323:	}
        -: 1324:      }
    #####: 1325:      return 0;
        -: 1326:
        -: 1327:		//return sea_hagCard(currentPlayer, state);
        -: 1328:			
        -: 1329:    case treasure_map:
        -: 1330:      //search hand for another treasure_map
    #####: 1331:      index = -1;
    #####: 1332:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1333:	{
    #####: 1334:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1335:	    {
    #####: 1336:	      index = i;
    #####: 1337:	      break;
        -: 1338:	    }
        -: 1339:	}
    #####: 1340:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1341:	{
        -: 1342:	  //trash both treasure cards
    #####: 1343:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1344:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1345:
        -: 1346:	  //gain 4 Gold cards
    #####: 1347:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1348:	    {
    #####: 1349:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1350:	    }
        -: 1351:				
        -: 1352:	  //return success
    #####: 1353:	  return 1;
        -: 1354:	}
        -: 1355:			
        -: 1356:      //no second treasure_map found in hand
    #####: 1357:      return -1;
        -: 1358:    }
        -: 1359:	
    #####: 1360:  return -1;
        -: 1361:}
        -: 1362:
function discardCard called 1 returned 100% blocks executed 78%
        1: 1363:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1364:{
        -: 1365:	
        -: 1366:  //if card is not trashed, added to Played pile 
        1: 1367:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1368:    {
        -: 1369:      //add card to played pile
        1: 1370:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        1: 1371:      state->playedCardCount++;
        -: 1372:    }
        -: 1373:	
        -: 1374:  //set played card to -1
        1: 1375:  state->hand[currentPlayer][handPos] = -1;
        -: 1376:	
        -: 1377:  //remove card from player's hand
        1: 1378:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1379:    {
        -: 1380:      //reduce number of cards in hand
    #####: 1381:      state->handCount[currentPlayer]--;
        -: 1382:    }
        1: 1383:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1384:    {
        -: 1385:      //reduce number of cards in hand
    #####: 1386:      state->handCount[currentPlayer]--;
        -: 1387:    }
        -: 1388:  else 	
        -: 1389:    {
        -: 1390:      //replace discarded card with last card in hand
        1: 1391:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1392:      //set last card to -1
        1: 1393:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1394:      //reduce number of cards in hand
        1: 1395:      state->handCount[currentPlayer]--;
        -: 1396:    }
        -: 1397:	
        1: 1398:  return 0;
        -: 1399:}
        -: 1400:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1401:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1402:{
        -: 1403:  //Note: supplyPos is enum of choosen card
        -: 1404:	
        -: 1405:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1406:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1407:    {
    #####: 1408:      return -1;
        -: 1409:    }
        -: 1410:	
        -: 1411:  //added card for [whoseTurn] current player:
        -: 1412:  // toFlag = 0 : add to discard
        -: 1413:  // toFlag = 1 : add to deck
        -: 1414:  // toFlag = 2 : add to hand
        -: 1415:
    #####: 1416:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1417:    {
    #####: 1418:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1419:      state->deckCount[player]++;
        -: 1420:    }
    #####: 1421:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1422:    {
    #####: 1423:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1424:      state->handCount[player]++;
        -: 1425:    }
        -: 1426:  else
        -: 1427:    {
    #####: 1428:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1429:      state->discardCount[player]++;
        -: 1430:    }
        -: 1431:	
        -: 1432:  //decrease number in supply pile
    #####: 1433:  state->supplyCount[supplyPos]--;
        -: 1434:	 
    #####: 1435:  return 0;
        -: 1436:}
        -: 1437:
function updateCoins called 2 returned 100% blocks executed 82%
        2: 1438:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1439:{
        -: 1440:  int i;
        -: 1441:	
        -: 1442:  //reset coin count
        2: 1443:  state->coins = 0;
        -: 1444:
        -: 1445:  //add coins for each Treasure card in player's hand
       12: 1446:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1447:    {
       10: 1448:      if (state->hand[player][i] == copper)
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
        -: 1449:	{
        6: 1450:	  state->coins += 1;
        -: 1451:	}
        4: 1452:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1453:	{
    #####: 1454:	  state->coins += 2;
        -: 1455:	}
        4: 1456:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1457:	{
    #####: 1458:	  state->coins += 3;
        -: 1459:	}	
        -: 1460:    }	
        -: 1461:
        -: 1462:  //add bonus
        2: 1463:  state->coins += bonus;
        -: 1464:
        2: 1465:  return 0;
        -: 1466:}
        -: 1467:
        -: 1468:
        -: 1469://end of dominion.c
        -: 1470:
cardtest3.c
***** Testing villageCard()... *****
Testing Player 0 Villager hand count unchanged...
Test PASSED
Testing Player 0 deck count -1...
Test PASSED
Testing Player 0 numActions +2...
Test FAILED
Player numActions incorrect. Expected: 3 Actual: 2
Testing Player 0 score unchanged...
Test PASSED
Testing Player 1 score unchanged...
Test PASSED
Testing Player 1 hand count unchanged...
Test PASSED
Testing Player 1 deck count unchanged...
Test PASSED
Testing Victory Card Piles unchanged...
Estate Card Pile...
Test PASSED
Province Card Pile...
Test PASSED
Duchy Card Pile...
Test PASSED
Testing Kingdom Card Piles unchanged...
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test PASSED
***** villageCard() Tests Complete *****

Processing file 1 out of 1
File 'dominion.c'
Lines executed:25.94% of 559
Branches executed:29.50% of 417
Taken at least once:18.71% of 417
Calls executed:16.84% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:3
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 90 returned 100% blocks executed 83%
       90:    8:int compare(const void* a, const void* b) {
       90:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
       90:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       24:   12:    return -1;
       66:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 3 returned 100% blocks executed 88%
        3:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        3:   44:  SelectStream(1);
call    0 returned 100%
        3:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
        3:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        3:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       33:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      330:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      300:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        3:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        3:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        3:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        3:   89:      state->supplyCount[estate] = 8;
        3:   90:      state->supplyCount[duchy] = 8;
        3:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        3:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        3:  102:  state->supplyCount[silver] = 40;
        3:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       63:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
      495:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
      465:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       30:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:		{
        6:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        3:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       27:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       30:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      435:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        9:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
        6:  140:      state->deckCount[i] = 0;
       24:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       18:  143:	  state->deck[i][j] = estate;
       18:  144:	  state->deckCount[i]++;
        -:  145:	}
       48:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       42:  148:	  state->deck[i][j] = copper;
       42:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        9:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
        6:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        9:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        6:  166:      state->handCount[i] = 0;
        6:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
       84:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
       81:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        3:  182:  state->outpostPlayed = 0;
        3:  183:  state->phase = 0;
        3:  184:  state->numActions = 1;
        3:  185:  state->numBuys = 1;
        3:  186:  state->playedCardCount = 0;
        3:  187:  state->whoseTurn = 0;
        3:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       18:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       15:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        3:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        3:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 6 returned 100% blocks executed 94%
        6:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        6:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        6:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
        6:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       72:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       60:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
       60:  216:    newDeck[newDeckPos] = state->deck[player][card];
       60:  217:    newDeckPos++;
      189:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 68%
branch  1 taken 32% (fallthrough)
      129:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       60:  221:    state->deckCount[player]--;
        -:  222:  }
       66:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       60:  224:    state->deck[player][i] = newDeck[i];
       60:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        6:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 3 returned 100% blocks executed 100%
        3:  346:int whoseTurn(struct gameState *state) {
        3:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 12 returned 100% blocks executed 32%
       12:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
       12:  420:  int score = 0;
        -:  421:  //score from hand
       44:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 73%
branch  1 taken 27% (fallthrough)
        -:  423:    {
       32:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       32:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 38% (fallthrough)
branch  1 taken 63%
       32:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       32:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       32:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       32:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
       12:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
       12:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
       12:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 19 returned 100% blocks executed 38%
       19:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       19:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       19:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       19:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       19:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       19:  576:    state->deckCount[player]--;
       19:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       19:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:/*************** REFACTORED CARDS ****************/
        -:  647:// BUG- drawntreasure = 1 instead of 0
function adventurerCard called 1 returned 100% blocks executed 67%
        1:  648:int adventurerCard(int currentPlayer, int temphand[], struct gameState *state) {
        -:  649:	//int drawntreasure=0;
        1:  650:	int drawntreasure=1;
        -:  651:	int cardDrawn;
        1:  652:	int z=0;
        -:  653:	
        3:  654:	while(drawntreasure<2){
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        1:  655:		if (state->deckCount[currentPlayer] < 1){ //if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  656:		shuffle(currentPlayer, state);
call    0 never executed
        -:  657:		}
        1:  658:		drawCard(currentPlayer, state);
call    0 returned 100%
        1:  659:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        1:  660:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        1:  661:			drawntreasure++;
        -:  662:		else{
    #####:  663:			temphand[z]=cardDrawn;
    #####:  664:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  665:			z++;
        -:  666:		}
        -:  667:	}
        2:  668:	while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  669:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  670:		z=z-1;
        -:  671:	}
        1:  672:	return 0;
        -:  673:}
        -:  674:
        -:  675:// BUG- only allows 2 cards to be drawn
function smithyCard called 1 returned 100% blocks executed 100%
        1:  676:int smithyCard(int currentPlayer, int handPos, struct gameState *state) {
        -:  677:	int i;
        -:  678:	//+3 Cards
        3:  679:	for (i = 0; i < 2; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  680:	//for (i = 0; i < 3; i++)
        -:  681:	{
        2:  682:		drawCard(currentPlayer, state);
call    0 returned 100%
        -:  683:	}
        -:  684:	
        -:  685:	//discard card from hand
        1:  686:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  687:	return 0;
        -:  688:}
        -:  689:
        -:  690:// BUG- allows only 1 action rather than 2
function villageCard called 1 returned 100% blocks executed 100%
        1:  691:int villageCard(int currentPlayer, int handPos, struct gameState *state) {
        -:  692:	//+1 Card
        1:  693:	drawCard(currentPlayer, state);
call    0 returned 100%
        -:  694:	
        -:  695:	//+2 Actions
        1:  696:	state->numActions = state->numActions + 1;
        -:  697:	//state->numActions = state->numActions + 2;
        -:  698:	
        -:  699:	//discard played card from hand
        1:  700:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  701:	return 0;
        -:  702:}
        -:  703:
        -:  704:// BUG- +3 cards insead of +4 cards
function council_roomCard called 0 returned 0% blocks executed 0%
    #####:  705:int council_roomCard(int currentPlayer, int handPos, struct gameState *state) {
        -:  706:	//+4 Cards
        -:  707:	int i;
    #####:  708:	for (i = 1; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  709:	//for (i = 0; i < 4; i++)
        -:  710:	{
    #####:  711:		drawCard(currentPlayer, state);
call    0 never executed
        -:  712:	}
        -:  713:
        -:  714:	//+1 Buy
    #####:  715:	state->numBuys++;
        -:  716:
        -:  717:	//Each other player draws a card
    #####:  718:	for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  719:	{
    #####:  720:		if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  721:		{
    #####:  722:			drawCard(i, state);
call    0 never executed
        -:  723:		}
        -:  724:	}
        -:  725:
        -:  726:	//put played card in played card pile
    #####:  727:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  728:
    #####:  729:	return 0;
        -:  730:}
        -:  731:
        -:  732:/*
        -:  733:int sea_hagCard(int currentPlayer, struct gameState *state) {
        -:  734:	for (int i = 0; i < state->numPlayers; i++) {
        -:  735:		if (i != currentPlayer){
        -:  736:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
        -:  737:			state->deckCount[i]--;
        -:  738:			state->discardCount[i]++;
        -:  739:			state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:  740:		}
        -:  741:	}
        -:  742:	return 0;
        -:  743:}
        -:  744:*/
        -:  745:
function embargoCard called 0 returned 0% blocks executed 0%
    #####:  746:int embargoCard(int currentPlayer, int handPos, struct gameState *state, int choice1) {
        -:  747:	//+2 Coins
    #####:  748:	state->coins = state->coins + 2;
        -:  749:	
        -:  750:	//see if selected pile is in play
    #####:  751:	if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -:  752:	{
    #####:  753:		return -1;
        -:  754:	}
        -:  755:	
        -:  756:	//add embargo token to selected supply pile
    #####:  757:	state->embargoTokens[choice1]++;
        -:  758:	
        -:  759:	//trash card
    #####:  760:	discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  761:	return 0;
        -:  762:}
        -:  763:/*********************************************************/
        -:  764:
function cardEffect called 3 returned 100% blocks executed 3%
        3:  765:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  766:{
        -:  767:  int i;
        -:  768:  int j;
        -:  769:  int k;
        -:  770:  int x;
        -:  771:  int index;
        3:  772:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        3:  773:  int nextPlayer = currentPlayer + 1;
        -:  774:
        3:  775:  int tributeRevealedCards[2] = {-1, -1};
        -:  776:  int temphand[MAX_HAND];// moved above the if statement
        -:  777:  //int drawntreasure=0;
        -:  778:  //int cardDrawn;
        3:  779:  int z = 0;// this is the counter for the temp hand
        3:  780:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  781:    nextPlayer = 0;
        -:  782:  }
        -:  783:  
        -:  784:	
        -:  785:  //uses switch to select card and perform actions
        3:  786:  switch( card ) 
branch  0 taken 33%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 33%
branch  7 taken 33%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  787:    {
        -:  788:    case adventurer:
        -:  789:/*
        -:  790:      while(drawntreasure<2){
        -:  791:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  792:	  shuffle(currentPlayer, state);
        -:  793:	}
        -:  794:	drawCard(currentPlayer, state);
        -:  795:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  796:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  797:	  drawntreasure++;
        -:  798:	else{
        -:  799:	  temphand[z]=cardDrawn;
        -:  800:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  801:	  z++;
        -:  802:	}
        -:  803:      }
        -:  804:      while(z-1>=0){
        -:  805:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  806:	z=z-1;
        -:  807:      }
        -:  808:      return 0;
        -:  809:*/
        1:  810:			return adventurerCard(currentPlayer, temphand, state);
call    0 returned 100%
        -:  811:			
        -:  812:    case council_room:
        -:  813:/*
        -:  814:      //+4 Cards
        -:  815:      for (i = 0; i < 4; i++)
        -:  816:	{
        -:  817:	  drawCard(currentPlayer, state);
        -:  818:	}
        -:  819:			
        -:  820:      //+1 Buy
        -:  821:      state->numBuys++;
        -:  822:			
        -:  823:      //Each other player draws a card
        -:  824:      for (i = 0; i < state->numPlayers; i++)
        -:  825:	{
        -:  826:	  if ( i != currentPlayer )
        -:  827:	    {
        -:  828:	      drawCard(i, state);
        -:  829:	    }
        -:  830:	}
        -:  831:			
        -:  832:      //put played card in played card pile
        -:  833:      discardCard(handPos, currentPlayer, state, 0);
        -:  834:			
        -:  835:      return 0;
        -:  836:*/
    #####:  837:		return council_roomCard(currentPlayer, handPos, state);
call    0 never executed
        -:  838:			
        -:  839:    case feast:
        -:  840:      //gain card with cost up to 5
        -:  841:      //Backup hand
    #####:  842:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  843:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  844:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  845:      }
        -:  846:      //Backup hand
        -:  847:
        -:  848:      //Update Coins for Buy
    #####:  849:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  850:      x = 1;//Condition to loop on
    #####:  851:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  852:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  853:	  if (DEBUG)
        -:  854:	    printf("None of that card left, sorry!\n");
        -:  855:
        -:  856:	  if (DEBUG){
        -:  857:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  858:	  }
        -:  859:	}
    #####:  860:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  861:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  862:
        -:  863:	  if (DEBUG){
        -:  864:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  865:	  }
        -:  866:	}
        -:  867:	else{
        -:  868:
        -:  869:	  if (DEBUG){
        -:  870:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  871:	  }
        -:  872:
    #####:  873:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  874:	  x = 0;//No more buying cards
        -:  875:
        -:  876:	  if (DEBUG){
        -:  877:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  878:	  }
        -:  879:
        -:  880:	}
        -:  881:      }     
        -:  882:
        -:  883:      //Reset Hand
    #####:  884:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  885:	state->hand[currentPlayer][i] = temphand[i];
    #####:  886:	temphand[i] = -1;
        -:  887:      }
        -:  888:      //Reset Hand
        -:  889:      			
    #####:  890:      return 0;
        -:  891:			
        -:  892:    case gardens:
    #####:  893:      return -1;
        -:  894:			
        -:  895:    case mine:
    #####:  896:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  897:
    #####:  898:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  899:	{
    #####:  900:	  return -1;
        -:  901:	}
        -:  902:		
    #####:  903:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  904:	{
    #####:  905:	  return -1;
        -:  906:	}
        -:  907:
    #####:  908:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  909:	{
    #####:  910:	  return -1;
        -:  911:	}
        -:  912:
    #####:  913:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  914:
        -:  915:      //discard card from hand
    #####:  916:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  917:
        -:  918:      //discard trashed card
    #####:  919:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  920:	{
    #####:  921:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  922:	    {
    #####:  923:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  924:	      break;
        -:  925:	    }
        -:  926:	}
        -:  927:			
    #####:  928:      return 0;
        -:  929:			
        -:  930:    case remodel:
    #####:  931:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  932:
    #####:  933:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  934:	{
    #####:  935:	  return -1;
        -:  936:	}
        -:  937:
    #####:  938:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  939:
        -:  940:      //discard card from hand
    #####:  941:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  942:
        -:  943:      //discard trashed card
    #####:  944:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  945:	{
    #####:  946:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  947:	    {
    #####:  948:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  949:	      break;
        -:  950:	    }
        -:  951:	}
        -:  952:
        -:  953:
    #####:  954:      return 0;
        -:  955:		
        -:  956:    case smithy:
        -:  957:/*
        -:  958:	  //+3 Cards
        -:  959:      for (i = 0; i < 3; i++)
        -:  960:	{
        -:  961:	  drawCard(currentPlayer, state);
        -:  962:	}
        -:  963:			
        -:  964:      //discard card from hand
        -:  965:      discardCard(handPos, currentPlayer, state, 0);
        -:  966:      return 0;
        -:  967: */
        1:  968:		return smithyCard(currentPlayer, handPos, state);
call    0 returned 100%
        -:  969:		
        -:  970:    case village:
        -:  971:/*
        -:  972:      //+1 Card
        -:  973:      drawCard(currentPlayer, state);
        -:  974:			
        -:  975:      //+2 Actions
        -:  976:      state->numActions = state->numActions + 2;
        -:  977:			
        -:  978:      //discard played card from hand
        -:  979:      discardCard(handPos, currentPlayer, state, 0);
        -:  980:      return 0;
        -:  981:*/
        1:  982:		return villageCard(currentPlayer, handPos, state);
call    0 returned 100%
        -:  983:			
        -:  984:    case baron:
    #####:  985:      state->numBuys++;//Increase buys by 1!
    #####:  986:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  987:	int p = 0;//Iterator for hand!
    #####:  988:	int card_not_discarded = 1;//Flag for discard set!
    #####:  989:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  990:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  991:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  992:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  993:	    state->discardCount[currentPlayer]++;
    #####:  994:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  995:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  996:	    }
    #####:  997:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  998:	    state->handCount[currentPlayer]--;
    #####:  999:	    card_not_discarded = 0;//Exit the loop
        -: 1000:	  }
    #####: 1001:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1002:	    if(DEBUG) {
        -: 1003:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1004:	      printf("Must gain an estate if there are any\n");
        -: 1005:	    }
    #####: 1006:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1007:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1008:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1009:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1010:		isGameOver(state);
call    0 never executed
        -: 1011:	      }
        -: 1012:	    }
    #####: 1013:	    card_not_discarded = 0;//Exit the loop
        -: 1014:	  }
        -: 1015:			    
        -: 1016:	  else{
    #####: 1017:	    p++;//Next card
        -: 1018:	  }
        -: 1019:	}
        -: 1020:      }
        -: 1021:			    
        -: 1022:      else{
    #####: 1023:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1024:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1025:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1026:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1027:	    isGameOver(state);
call    0 never executed
        -: 1028:	  }
        -: 1029:	}
        -: 1030:      }
        -: 1031:	    
        -: 1032:      
    #####: 1033:      return 0;
        -: 1034:		
        -: 1035:    case great_hall:
        -: 1036:      //+1 Card
    #####: 1037:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1038:			
        -: 1039:      //+1 Actions
    #####: 1040:      state->numActions++;
        -: 1041:			
        -: 1042:      //discard card from hand
    #####: 1043:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1044:      return 0;
        -: 1045:		
        -: 1046:    case minion:
        -: 1047:      //+1 action
    #####: 1048:      state->numActions++;
        -: 1049:			
        -: 1050:      //discard card from hand
    #####: 1051:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1052:			
    #####: 1053:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1054:	{
    #####: 1055:	  state->coins = state->coins + 2;
        -: 1056:	}
        -: 1057:			
    #####: 1058:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1059:	{
        -: 1060:	  //discard hand
    #####: 1061:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1062:	    {
    #####: 1063:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1064:	    }
        -: 1065:				
        -: 1066:	  //draw 4
    #####: 1067:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1068:	    {
    #####: 1069:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1070:	    }
        -: 1071:				
        -: 1072:	  //other players discard hand and redraw if hand size > 4
    #####: 1073:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1074:	    {
    #####: 1075:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1076:		{
    #####: 1077:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1078:		    {
        -: 1079:		      //discard hand
    #####: 1080:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1081:			{
    #####: 1082:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1083:			}
        -: 1084:							
        -: 1085:		      //draw 4
    #####: 1086:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1087:			{
    #####: 1088:			  drawCard(i, state);
call    0 never executed
        -: 1089:			}
        -: 1090:		    }
        -: 1091:		}
        -: 1092:	    }
        -: 1093:				
        -: 1094:	}
    #####: 1095:      return 0;
        -: 1096:		
        -: 1097:    case steward:
    #####: 1098:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1099:	{
        -: 1100:	  //+2 cards
    #####: 1101:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1102:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1103:	}
    #####: 1104:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1105:	{
        -: 1106:	  //+2 coins
    #####: 1107:	  state->coins = state->coins + 2;
        -: 1108:	}
        -: 1109:      else
        -: 1110:	{
        -: 1111:	  //trash 2 cards in hand
    #####: 1112:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1113:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1114:	}
        -: 1115:			
        -: 1116:      //discard card from hand
    #####: 1117:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1118:      return 0;
        -: 1119:		
        -: 1120:    case tribute:
    #####: 1121:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1122:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1123:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1124:	  state->deckCount[nextPlayer]--;
        -: 1125:	}
    #####: 1126:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1127:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1128:	  state->discardCount[nextPlayer]--;
        -: 1129:	}
        -: 1130:	else{
        -: 1131:	  //No Card to Reveal
        -: 1132:	  if (DEBUG){
        -: 1133:	    printf("No cards to reveal\n");
        -: 1134:	  }
        -: 1135:	}
        -: 1136:      }
        -: 1137:	    
        -: 1138:      else{
    #####: 1139:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1140:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1141:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1142:	    state->deckCount[nextPlayer]++;
    #####: 1143:	    state->discard[nextPlayer][i] = -1;
    #####: 1144:	    state->discardCount[nextPlayer]--;
        -: 1145:	  }
        -: 1146:			    
    #####: 1147:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1148:	} 
    #####: 1149:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1150:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1151:	state->deckCount[nextPlayer]--;
    #####: 1152:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1153:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1154:	state->deckCount[nextPlayer]--;
        -: 1155:      }    
        -: 1156:		       
    #####: 1157:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1158:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1159:	state->playedCardCount++;
    #####: 1160:	tributeRevealedCards[1] = -1;
        -: 1161:      }
        -: 1162:
    #####: 1163:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1164:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1165:	  state->coins += 2;
        -: 1166:	}
        -: 1167:		    
    #####: 1168:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1169:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1170:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1171:	}
        -: 1172:	else{//Action Card
    #####: 1173:	  state->numActions = state->numActions + 2;
        -: 1174:	}
        -: 1175:      }
        -: 1176:	    
    #####: 1177:      return 0;
        -: 1178:		
        -: 1179:    case ambassador:
    #####: 1180:      j = 0;		//used to check if player has enough cards to discard
        -: 1181:
    #####: 1182:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1183:	{
    #####: 1184:	  return -1;				
        -: 1185:	}
        -: 1186:
    #####: 1187:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1188:	{
    #####: 1189:	  return -1;
        -: 1190:	}
        -: 1191:
    #####: 1192:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1193:	{
    #####: 1194:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1195:	    {
    #####: 1196:	      j++;
        -: 1197:	    }
        -: 1198:	}
    #####: 1199:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1200:	{
    #####: 1201:	  return -1;				
        -: 1202:	}
        -: 1203:
        -: 1204:      if (DEBUG) 
        -: 1205:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1206:
        -: 1207:      //increase supply count for choosen card by amount being discarded
    #####: 1208:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1209:			
        -: 1210:      //each other player gains a copy of revealed card
    #####: 1211:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1212:	{
    #####: 1213:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1214:	    {
    #####: 1215:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1216:	    }
        -: 1217:	}
        -: 1218:
        -: 1219:      //discard played card from hand
    #####: 1220:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1221:
        -: 1222:      //trash copies of cards returned to supply
    #####: 1223:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1224:	{
    #####: 1225:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1226:	    {
    #####: 1227:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1228:		{
    #####: 1229:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1230:		  break;
        -: 1231:		}
        -: 1232:	    }
        -: 1233:	}			
        -: 1234:
    #####: 1235:      return 0;
        -: 1236:		
        -: 1237:    case cutpurse:
        -: 1238:
    #####: 1239:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1240:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1241:	{
    #####: 1242:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1243:	    {
    #####: 1244:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1245:		{
    #####: 1246:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1247:		    {
    #####: 1248:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1249:		      break;
        -: 1250:		    }
    #####: 1251:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1252:		    {
    #####: 1253:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1254:			{
        -: 1255:			  if (DEBUG)
        -: 1256:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1257:			}	
    #####: 1258:		      break;
        -: 1259:		    }		
        -: 1260:		}
        -: 1261:					
        -: 1262:	    }
        -: 1263:				
        -: 1264:	}				
        -: 1265:
        -: 1266:      //discard played card from hand
    #####: 1267:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1268:
    #####: 1269:      return 0;
        -: 1270:
        -: 1271:		
        -: 1272:    case embargo:
        -: 1273:/*
        -: 1274:      //+2 Coins
        -: 1275:      state->coins = state->coins + 2;
        -: 1276:			
        -: 1277:      //see if selected pile is in play
        -: 1278:      if ( state->supplyCount[choice1] == -1 )
        -: 1279:	{
        -: 1280:	  return -1;
        -: 1281:	}
        -: 1282: 
        -: 1283:      //add embargo token to selected supply pile
        -: 1284:      state->embargoTokens[choice1]++;
        -: 1285:			
        -: 1286:      //trash card
        -: 1287:      discardCard(handPos, currentPlayer, state, 1);		
        -: 1288:      return 0;
        -: 1289: */
    #####: 1290:		return embargoCard(currentPlayer, handPos, state, choice1);
call    0 never executed
        -: 1291:			
        -: 1292:    case outpost:
        -: 1293:      //set outpost flag
    #####: 1294:      state->outpostPlayed++;
        -: 1295:			
        -: 1296:      //discard card
    #####: 1297:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1298:      return 0;
        -: 1299:		
        -: 1300:    case salvager:
        -: 1301:      //+1 buy
    #####: 1302:      state->numBuys++;
        -: 1303:			
    #####: 1304:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1305:	{
        -: 1306:	  //gain coins equal to trashed card
    #####: 1307:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1308:	  //trash card
    #####: 1309:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1310:	}
        -: 1311:			
        -: 1312:      //discard card
    #####: 1313:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1314:      return 0;
        -: 1315:		
        -: 1316:    case sea_hag:
        -: 1317:
    #####: 1318:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1319:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1320:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1321:	  state->discardCount[i]++;
    #####: 1322:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1323:	}
        -: 1324:      }
    #####: 1325:      return 0;
        -: 1326:
        -: 1327:		//return sea_hagCard(currentPlayer, state);
        -: 1328:			
        -: 1329:    case treasure_map:
        -: 1330:      //search hand for another treasure_map
    #####: 1331:      index = -1;
    #####: 1332:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1333:	{
    #####: 1334:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1335:	    {
    #####: 1336:	      index = i;
    #####: 1337:	      break;
        -: 1338:	    }
        -: 1339:	}
    #####: 1340:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1341:	{
        -: 1342:	  //trash both treasure cards
    #####: 1343:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1344:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1345:
        -: 1346:	  //gain 4 Gold cards
    #####: 1347:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1348:	    {
    #####: 1349:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1350:	    }
        -: 1351:				
        -: 1352:	  //return success
    #####: 1353:	  return 1;
        -: 1354:	}
        -: 1355:			
        -: 1356:      //no second treasure_map found in hand
    #####: 1357:      return -1;
        -: 1358:    }
        -: 1359:	
    #####: 1360:  return -1;
        -: 1361:}
        -: 1362:
function discardCard called 2 returned 100% blocks executed 78%
        2: 1363:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1364:{
        -: 1365:	
        -: 1366:  //if card is not trashed, added to Played pile 
        2: 1367:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1368:    {
        -: 1369:      //add card to played pile
        2: 1370:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1371:      state->playedCardCount++;
        -: 1372:    }
        -: 1373:	
        -: 1374:  //set played card to -1
        2: 1375:  state->hand[currentPlayer][handPos] = -1;
        -: 1376:	
        -: 1377:  //remove card from player's hand
        2: 1378:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1379:    {
        -: 1380:      //reduce number of cards in hand
    #####: 1381:      state->handCount[currentPlayer]--;
        -: 1382:    }
        2: 1383:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1384:    {
        -: 1385:      //reduce number of cards in hand
    #####: 1386:      state->handCount[currentPlayer]--;
        -: 1387:    }
        -: 1388:  else 	
        -: 1389:    {
        -: 1390:      //replace discarded card with last card in hand
        2: 1391:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1392:      //set last card to -1
        2: 1393:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1394:      //reduce number of cards in hand
        2: 1395:      state->handCount[currentPlayer]--;
        -: 1396:    }
        -: 1397:	
        2: 1398:  return 0;
        -: 1399:}
        -: 1400:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1401:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1402:{
        -: 1403:  //Note: supplyPos is enum of choosen card
        -: 1404:	
        -: 1405:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1406:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1407:    {
    #####: 1408:      return -1;
        -: 1409:    }
        -: 1410:	
        -: 1411:  //added card for [whoseTurn] current player:
        -: 1412:  // toFlag = 0 : add to discard
        -: 1413:  // toFlag = 1 : add to deck
        -: 1414:  // toFlag = 2 : add to hand
        -: 1415:
    #####: 1416:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1417:    {
    #####: 1418:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1419:      state->deckCount[player]++;
        -: 1420:    }
    #####: 1421:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1422:    {
    #####: 1423:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1424:      state->handCount[player]++;
        -: 1425:    }
        -: 1426:  else
        -: 1427:    {
    #####: 1428:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1429:      state->discardCount[player]++;
        -: 1430:    }
        -: 1431:	
        -: 1432:  //decrease number in supply pile
    #####: 1433:  state->supplyCount[supplyPos]--;
        -: 1434:	 
    #####: 1435:  return 0;
        -: 1436:}
        -: 1437:
function updateCoins called 3 returned 100% blocks executed 82%
        3: 1438:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1439:{
        -: 1440:  int i;
        -: 1441:	
        -: 1442:  //reset coin count
        3: 1443:  state->coins = 0;
        -: 1444:
        -: 1445:  //add coins for each Treasure card in player's hand
       18: 1446:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1447:    {
       15: 1448:      if (state->hand[player][i] == copper)
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
        -: 1449:	{
        9: 1450:	  state->coins += 1;
        -: 1451:	}
        6: 1452:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1453:	{
    #####: 1454:	  state->coins += 2;
        -: 1455:	}
        6: 1456:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1457:	{
    #####: 1458:	  state->coins += 3;
        -: 1459:	}	
        -: 1460:    }	
        -: 1461:
        -: 1462:  //add bonus
        3: 1463:  state->coins += bonus;
        -: 1464:
        3: 1465:  return 0;
        -: 1466:}
        -: 1467:
        -: 1468:
        -: 1469://end of dominion.c
        -: 1470:
cardtest4.c
***** Testing council_roomCard() *****
Testing Player 0 hand count +4...
Test FAILED
Player hand count incorrect. Expected: 8 Actual: 7
Testing Player 0 deck count -4...
Test FAILED
Player deck count incorrect. Expected: 1 Actual: 2
Testing Player 0 numBuys +1...
Test PASSED
Testing Player 0 score unchanged...
Test PASSED
Testing Player 1 score unchanged...
Test FAILED
Opposing player score changed. Expected: 0 Actual: 1
Testing Player 1 hand count +1...
Test PASSED
Testing Player 1 deck count -1...
Test PASSED
Testing Victory Card Piles unchanged...
Estate Card Pile...
Test PASSED
Province Card Pile...
Test PASSED
Duchy Card Pile...
Test PASSED
Testing Kingdom Card Piles unchanged...
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test PASSED
***** council_roomCard() Tests Complete *****

Processing file 1 out of 1
File 'dominion.c'
Lines executed:27.73% of 559
Branches executed:30.94% of 417
Taken at least once:20.38% of 417
Calls executed:21.05% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:4
        -:    0:Programs:4
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 120 returned 100% blocks executed 83%
      120:    8:int compare(const void* a, const void* b) {
      120:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
      120:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       32:   12:    return -1;
       88:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 4 returned 100% blocks executed 88%
        4:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        4:   44:  SelectStream(1);
call    0 returned 100%
        4:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
        4:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        4:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       44:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      440:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      400:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        4:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        4:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        4:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        4:   89:      state->supplyCount[estate] = 8;
        4:   90:      state->supplyCount[duchy] = 8;
        4:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        4:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        4:  102:  state->supplyCount[silver] = 40;
        4:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       84:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
      660:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
      620:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       40:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:		{
        8:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       36:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       40:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      580:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       12:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
        8:  140:      state->deckCount[i] = 0;
       32:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       24:  143:	  state->deck[i][j] = estate;
       24:  144:	  state->deckCount[i]++;
        -:  145:	}
       64:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       56:  148:	  state->deck[i][j] = copper;
       56:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       12:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
        8:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       12:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        8:  166:      state->handCount[i] = 0;
        8:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      112:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      108:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        4:  182:  state->outpostPlayed = 0;
        4:  183:  state->phase = 0;
        4:  184:  state->numActions = 1;
        4:  185:  state->numBuys = 1;
        4:  186:  state->playedCardCount = 0;
        4:  187:  state->whoseTurn = 0;
        4:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       24:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       20:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        4:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        4:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 8 returned 100% blocks executed 94%
        8:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        8:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        8:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
        8:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       96:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       80:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
       80:  216:    newDeck[newDeckPos] = state->deck[player][card];
       80:  217:    newDeckPos++;
      252:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 68%
branch  1 taken 32% (fallthrough)
      172:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       80:  221:    state->deckCount[player]--;
        -:  222:  }
       88:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       80:  224:    state->deck[player][i] = newDeck[i];
       80:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        8:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 4 returned 100% blocks executed 100%
        4:  346:int whoseTurn(struct gameState *state) {
        4:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 18 returned 100% blocks executed 32%
       18:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
       18:  420:  int score = 0;
        -:  421:  //score from hand
       64:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
        -:  423:    {
       46:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       46:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 39% (fallthrough)
branch  1 taken 61%
       46:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       46:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       46:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       46:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
       18:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
       18:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
       18:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 28 returned 100% blocks executed 38%
       28:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       28:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       28:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       28:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       28:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       28:  576:    state->deckCount[player]--;
       28:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       28:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:/*************** REFACTORED CARDS ****************/
        -:  647:// BUG- drawntreasure = 1 instead of 0
function adventurerCard called 1 returned 100% blocks executed 67%
        1:  648:int adventurerCard(int currentPlayer, int temphand[], struct gameState *state) {
        -:  649:	//int drawntreasure=0;
        1:  650:	int drawntreasure=1;
        -:  651:	int cardDrawn;
        1:  652:	int z=0;
        -:  653:	
        3:  654:	while(drawntreasure<2){
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        1:  655:		if (state->deckCount[currentPlayer] < 1){ //if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  656:		shuffle(currentPlayer, state);
call    0 never executed
        -:  657:		}
        1:  658:		drawCard(currentPlayer, state);
call    0 returned 100%
        1:  659:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        1:  660:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        1:  661:			drawntreasure++;
        -:  662:		else{
    #####:  663:			temphand[z]=cardDrawn;
    #####:  664:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  665:			z++;
        -:  666:		}
        -:  667:	}
        2:  668:	while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  669:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  670:		z=z-1;
        -:  671:	}
        1:  672:	return 0;
        -:  673:}
        -:  674:
        -:  675:// BUG- only allows 2 cards to be drawn
function smithyCard called 1 returned 100% blocks executed 100%
        1:  676:int smithyCard(int currentPlayer, int handPos, struct gameState *state) {
        -:  677:	int i;
        -:  678:	//+3 Cards
        3:  679:	for (i = 0; i < 2; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  680:	//for (i = 0; i < 3; i++)
        -:  681:	{
        2:  682:		drawCard(currentPlayer, state);
call    0 returned 100%
        -:  683:	}
        -:  684:	
        -:  685:	//discard card from hand
        1:  686:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  687:	return 0;
        -:  688:}
        -:  689:
        -:  690:// BUG- allows only 1 action rather than 2
function villageCard called 1 returned 100% blocks executed 100%
        1:  691:int villageCard(int currentPlayer, int handPos, struct gameState *state) {
        -:  692:	//+1 Card
        1:  693:	drawCard(currentPlayer, state);
call    0 returned 100%
        -:  694:	
        -:  695:	//+2 Actions
        1:  696:	state->numActions = state->numActions + 1;
        -:  697:	//state->numActions = state->numActions + 2;
        -:  698:	
        -:  699:	//discard played card from hand
        1:  700:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  701:	return 0;
        -:  702:}
        -:  703:
        -:  704:// BUG- +3 cards insead of +4 cards
function council_roomCard called 1 returned 100% blocks executed 100%
        1:  705:int council_roomCard(int currentPlayer, int handPos, struct gameState *state) {
        -:  706:	//+4 Cards
        -:  707:	int i;
        4:  708:	for (i = 1; i < 4; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  709:	//for (i = 0; i < 4; i++)
        -:  710:	{
        3:  711:		drawCard(currentPlayer, state);
call    0 returned 100%
        -:  712:	}
        -:  713:
        -:  714:	//+1 Buy
        1:  715:	state->numBuys++;
        -:  716:
        -:  717:	//Each other player draws a card
        3:  718:	for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  719:	{
        2:  720:		if ( i != currentPlayer )
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  721:		{
        1:  722:			drawCard(i, state);
call    0 returned 100%
        -:  723:		}
        -:  724:	}
        -:  725:
        -:  726:	//put played card in played card pile
        1:  727:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  728:
        1:  729:	return 0;
        -:  730:}
        -:  731:
        -:  732:/*
        -:  733:int sea_hagCard(int currentPlayer, struct gameState *state) {
        -:  734:	for (int i = 0; i < state->numPlayers; i++) {
        -:  735:		if (i != currentPlayer){
        -:  736:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
        -:  737:			state->deckCount[i]--;
        -:  738:			state->discardCount[i]++;
        -:  739:			state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:  740:		}
        -:  741:	}
        -:  742:	return 0;
        -:  743:}
        -:  744:*/
        -:  745:
function embargoCard called 0 returned 0% blocks executed 0%
    #####:  746:int embargoCard(int currentPlayer, int handPos, struct gameState *state, int choice1) {
        -:  747:	//+2 Coins
    #####:  748:	state->coins = state->coins + 2;
        -:  749:	
        -:  750:	//see if selected pile is in play
    #####:  751:	if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -:  752:	{
    #####:  753:		return -1;
        -:  754:	}
        -:  755:	
        -:  756:	//add embargo token to selected supply pile
    #####:  757:	state->embargoTokens[choice1]++;
        -:  758:	
        -:  759:	//trash card
    #####:  760:	discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  761:	return 0;
        -:  762:}
        -:  763:/*********************************************************/
        -:  764:
function cardEffect called 4 returned 100% blocks executed 4%
        4:  765:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  766:{
        -:  767:  int i;
        -:  768:  int j;
        -:  769:  int k;
        -:  770:  int x;
        -:  771:  int index;
        4:  772:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        4:  773:  int nextPlayer = currentPlayer + 1;
        -:  774:
        4:  775:  int tributeRevealedCards[2] = {-1, -1};
        -:  776:  int temphand[MAX_HAND];// moved above the if statement
        -:  777:  //int drawntreasure=0;
        -:  778:  //int cardDrawn;
        4:  779:  int z = 0;// this is the counter for the temp hand
        4:  780:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  781:    nextPlayer = 0;
        -:  782:  }
        -:  783:  
        -:  784:	
        -:  785:  //uses switch to select card and perform actions
        4:  786:  switch( card ) 
branch  0 taken 25%
branch  1 taken 25%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 25%
branch  7 taken 25%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  787:    {
        -:  788:    case adventurer:
        -:  789:/*
        -:  790:      while(drawntreasure<2){
        -:  791:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  792:	  shuffle(currentPlayer, state);
        -:  793:	}
        -:  794:	drawCard(currentPlayer, state);
        -:  795:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  796:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  797:	  drawntreasure++;
        -:  798:	else{
        -:  799:	  temphand[z]=cardDrawn;
        -:  800:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  801:	  z++;
        -:  802:	}
        -:  803:      }
        -:  804:      while(z-1>=0){
        -:  805:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  806:	z=z-1;
        -:  807:      }
        -:  808:      return 0;
        -:  809:*/
        1:  810:			return adventurerCard(currentPlayer, temphand, state);
call    0 returned 100%
        -:  811:			
        -:  812:    case council_room:
        -:  813:/*
        -:  814:      //+4 Cards
        -:  815:      for (i = 0; i < 4; i++)
        -:  816:	{
        -:  817:	  drawCard(currentPlayer, state);
        -:  818:	}
        -:  819:			
        -:  820:      //+1 Buy
        -:  821:      state->numBuys++;
        -:  822:			
        -:  823:      //Each other player draws a card
        -:  824:      for (i = 0; i < state->numPlayers; i++)
        -:  825:	{
        -:  826:	  if ( i != currentPlayer )
        -:  827:	    {
        -:  828:	      drawCard(i, state);
        -:  829:	    }
        -:  830:	}
        -:  831:			
        -:  832:      //put played card in played card pile
        -:  833:      discardCard(handPos, currentPlayer, state, 0);
        -:  834:			
        -:  835:      return 0;
        -:  836:*/
        1:  837:		return council_roomCard(currentPlayer, handPos, state);
call    0 returned 100%
        -:  838:			
        -:  839:    case feast:
        -:  840:      //gain card with cost up to 5
        -:  841:      //Backup hand
    #####:  842:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  843:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  844:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  845:      }
        -:  846:      //Backup hand
        -:  847:
        -:  848:      //Update Coins for Buy
    #####:  849:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  850:      x = 1;//Condition to loop on
    #####:  851:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  852:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  853:	  if (DEBUG)
        -:  854:	    printf("None of that card left, sorry!\n");
        -:  855:
        -:  856:	  if (DEBUG){
        -:  857:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  858:	  }
        -:  859:	}
    #####:  860:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  861:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  862:
        -:  863:	  if (DEBUG){
        -:  864:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  865:	  }
        -:  866:	}
        -:  867:	else{
        -:  868:
        -:  869:	  if (DEBUG){
        -:  870:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  871:	  }
        -:  872:
    #####:  873:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  874:	  x = 0;//No more buying cards
        -:  875:
        -:  876:	  if (DEBUG){
        -:  877:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  878:	  }
        -:  879:
        -:  880:	}
        -:  881:      }     
        -:  882:
        -:  883:      //Reset Hand
    #####:  884:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  885:	state->hand[currentPlayer][i] = temphand[i];
    #####:  886:	temphand[i] = -1;
        -:  887:      }
        -:  888:      //Reset Hand
        -:  889:      			
    #####:  890:      return 0;
        -:  891:			
        -:  892:    case gardens:
    #####:  893:      return -1;
        -:  894:			
        -:  895:    case mine:
    #####:  896:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  897:
    #####:  898:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  899:	{
    #####:  900:	  return -1;
        -:  901:	}
        -:  902:		
    #####:  903:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  904:	{
    #####:  905:	  return -1;
        -:  906:	}
        -:  907:
    #####:  908:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  909:	{
    #####:  910:	  return -1;
        -:  911:	}
        -:  912:
    #####:  913:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  914:
        -:  915:      //discard card from hand
    #####:  916:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  917:
        -:  918:      //discard trashed card
    #####:  919:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  920:	{
    #####:  921:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  922:	    {
    #####:  923:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  924:	      break;
        -:  925:	    }
        -:  926:	}
        -:  927:			
    #####:  928:      return 0;
        -:  929:			
        -:  930:    case remodel:
    #####:  931:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  932:
    #####:  933:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  934:	{
    #####:  935:	  return -1;
        -:  936:	}
        -:  937:
    #####:  938:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  939:
        -:  940:      //discard card from hand
    #####:  941:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  942:
        -:  943:      //discard trashed card
    #####:  944:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  945:	{
    #####:  946:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  947:	    {
    #####:  948:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  949:	      break;
        -:  950:	    }
        -:  951:	}
        -:  952:
        -:  953:
    #####:  954:      return 0;
        -:  955:		
        -:  956:    case smithy:
        -:  957:/*
        -:  958:	  //+3 Cards
        -:  959:      for (i = 0; i < 3; i++)
        -:  960:	{
        -:  961:	  drawCard(currentPlayer, state);
        -:  962:	}
        -:  963:			
        -:  964:      //discard card from hand
        -:  965:      discardCard(handPos, currentPlayer, state, 0);
        -:  966:      return 0;
        -:  967: */
        1:  968:		return smithyCard(currentPlayer, handPos, state);
call    0 returned 100%
        -:  969:		
        -:  970:    case village:
        -:  971:/*
        -:  972:      //+1 Card
        -:  973:      drawCard(currentPlayer, state);
        -:  974:			
        -:  975:      //+2 Actions
        -:  976:      state->numActions = state->numActions + 2;
        -:  977:			
        -:  978:      //discard played card from hand
        -:  979:      discardCard(handPos, currentPlayer, state, 0);
        -:  980:      return 0;
        -:  981:*/
        1:  982:		return villageCard(currentPlayer, handPos, state);
call    0 returned 100%
        -:  983:			
        -:  984:    case baron:
    #####:  985:      state->numBuys++;//Increase buys by 1!
    #####:  986:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  987:	int p = 0;//Iterator for hand!
    #####:  988:	int card_not_discarded = 1;//Flag for discard set!
    #####:  989:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  990:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  991:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  992:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  993:	    state->discardCount[currentPlayer]++;
    #####:  994:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  995:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  996:	    }
    #####:  997:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  998:	    state->handCount[currentPlayer]--;
    #####:  999:	    card_not_discarded = 0;//Exit the loop
        -: 1000:	  }
    #####: 1001:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1002:	    if(DEBUG) {
        -: 1003:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1004:	      printf("Must gain an estate if there are any\n");
        -: 1005:	    }
    #####: 1006:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1007:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1008:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1009:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1010:		isGameOver(state);
call    0 never executed
        -: 1011:	      }
        -: 1012:	    }
    #####: 1013:	    card_not_discarded = 0;//Exit the loop
        -: 1014:	  }
        -: 1015:			    
        -: 1016:	  else{
    #####: 1017:	    p++;//Next card
        -: 1018:	  }
        -: 1019:	}
        -: 1020:      }
        -: 1021:			    
        -: 1022:      else{
    #####: 1023:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1024:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1025:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1026:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1027:	    isGameOver(state);
call    0 never executed
        -: 1028:	  }
        -: 1029:	}
        -: 1030:      }
        -: 1031:	    
        -: 1032:      
    #####: 1033:      return 0;
        -: 1034:		
        -: 1035:    case great_hall:
        -: 1036:      //+1 Card
    #####: 1037:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1038:			
        -: 1039:      //+1 Actions
    #####: 1040:      state->numActions++;
        -: 1041:			
        -: 1042:      //discard card from hand
    #####: 1043:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1044:      return 0;
        -: 1045:		
        -: 1046:    case minion:
        -: 1047:      //+1 action
    #####: 1048:      state->numActions++;
        -: 1049:			
        -: 1050:      //discard card from hand
    #####: 1051:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1052:			
    #####: 1053:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1054:	{
    #####: 1055:	  state->coins = state->coins + 2;
        -: 1056:	}
        -: 1057:			
    #####: 1058:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1059:	{
        -: 1060:	  //discard hand
    #####: 1061:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1062:	    {
    #####: 1063:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1064:	    }
        -: 1065:				
        -: 1066:	  //draw 4
    #####: 1067:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1068:	    {
    #####: 1069:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1070:	    }
        -: 1071:				
        -: 1072:	  //other players discard hand and redraw if hand size > 4
    #####: 1073:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1074:	    {
    #####: 1075:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1076:		{
    #####: 1077:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1078:		    {
        -: 1079:		      //discard hand
    #####: 1080:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1081:			{
    #####: 1082:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1083:			}
        -: 1084:							
        -: 1085:		      //draw 4
    #####: 1086:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1087:			{
    #####: 1088:			  drawCard(i, state);
call    0 never executed
        -: 1089:			}
        -: 1090:		    }
        -: 1091:		}
        -: 1092:	    }
        -: 1093:				
        -: 1094:	}
    #####: 1095:      return 0;
        -: 1096:		
        -: 1097:    case steward:
    #####: 1098:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1099:	{
        -: 1100:	  //+2 cards
    #####: 1101:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1102:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1103:	}
    #####: 1104:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1105:	{
        -: 1106:	  //+2 coins
    #####: 1107:	  state->coins = state->coins + 2;
        -: 1108:	}
        -: 1109:      else
        -: 1110:	{
        -: 1111:	  //trash 2 cards in hand
    #####: 1112:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1113:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1114:	}
        -: 1115:			
        -: 1116:      //discard card from hand
    #####: 1117:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1118:      return 0;
        -: 1119:		
        -: 1120:    case tribute:
    #####: 1121:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1122:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1123:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1124:	  state->deckCount[nextPlayer]--;
        -: 1125:	}
    #####: 1126:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1127:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1128:	  state->discardCount[nextPlayer]--;
        -: 1129:	}
        -: 1130:	else{
        -: 1131:	  //No Card to Reveal
        -: 1132:	  if (DEBUG){
        -: 1133:	    printf("No cards to reveal\n");
        -: 1134:	  }
        -: 1135:	}
        -: 1136:      }
        -: 1137:	    
        -: 1138:      else{
    #####: 1139:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1140:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1141:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1142:	    state->deckCount[nextPlayer]++;
    #####: 1143:	    state->discard[nextPlayer][i] = -1;
    #####: 1144:	    state->discardCount[nextPlayer]--;
        -: 1145:	  }
        -: 1146:			    
    #####: 1147:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1148:	} 
    #####: 1149:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1150:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1151:	state->deckCount[nextPlayer]--;
    #####: 1152:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1153:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1154:	state->deckCount[nextPlayer]--;
        -: 1155:      }    
        -: 1156:		       
    #####: 1157:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1158:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1159:	state->playedCardCount++;
    #####: 1160:	tributeRevealedCards[1] = -1;
        -: 1161:      }
        -: 1162:
    #####: 1163:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1164:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1165:	  state->coins += 2;
        -: 1166:	}
        -: 1167:		    
    #####: 1168:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1169:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1170:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1171:	}
        -: 1172:	else{//Action Card
    #####: 1173:	  state->numActions = state->numActions + 2;
        -: 1174:	}
        -: 1175:      }
        -: 1176:	    
    #####: 1177:      return 0;
        -: 1178:		
        -: 1179:    case ambassador:
    #####: 1180:      j = 0;		//used to check if player has enough cards to discard
        -: 1181:
    #####: 1182:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1183:	{
    #####: 1184:	  return -1;				
        -: 1185:	}
        -: 1186:
    #####: 1187:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1188:	{
    #####: 1189:	  return -1;
        -: 1190:	}
        -: 1191:
    #####: 1192:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1193:	{
    #####: 1194:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1195:	    {
    #####: 1196:	      j++;
        -: 1197:	    }
        -: 1198:	}
    #####: 1199:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1200:	{
    #####: 1201:	  return -1;				
        -: 1202:	}
        -: 1203:
        -: 1204:      if (DEBUG) 
        -: 1205:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1206:
        -: 1207:      //increase supply count for choosen card by amount being discarded
    #####: 1208:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1209:			
        -: 1210:      //each other player gains a copy of revealed card
    #####: 1211:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1212:	{
    #####: 1213:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1214:	    {
    #####: 1215:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1216:	    }
        -: 1217:	}
        -: 1218:
        -: 1219:      //discard played card from hand
    #####: 1220:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1221:
        -: 1222:      //trash copies of cards returned to supply
    #####: 1223:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1224:	{
    #####: 1225:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1226:	    {
    #####: 1227:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1228:		{
    #####: 1229:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1230:		  break;
        -: 1231:		}
        -: 1232:	    }
        -: 1233:	}			
        -: 1234:
    #####: 1235:      return 0;
        -: 1236:		
        -: 1237:    case cutpurse:
        -: 1238:
    #####: 1239:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1240:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1241:	{
    #####: 1242:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1243:	    {
    #####: 1244:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1245:		{
    #####: 1246:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1247:		    {
    #####: 1248:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1249:		      break;
        -: 1250:		    }
    #####: 1251:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1252:		    {
    #####: 1253:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1254:			{
        -: 1255:			  if (DEBUG)
        -: 1256:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1257:			}	
    #####: 1258:		      break;
        -: 1259:		    }		
        -: 1260:		}
        -: 1261:					
        -: 1262:	    }
        -: 1263:				
        -: 1264:	}				
        -: 1265:
        -: 1266:      //discard played card from hand
    #####: 1267:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1268:
    #####: 1269:      return 0;
        -: 1270:
        -: 1271:		
        -: 1272:    case embargo:
        -: 1273:/*
        -: 1274:      //+2 Coins
        -: 1275:      state->coins = state->coins + 2;
        -: 1276:			
        -: 1277:      //see if selected pile is in play
        -: 1278:      if ( state->supplyCount[choice1] == -1 )
        -: 1279:	{
        -: 1280:	  return -1;
        -: 1281:	}
        -: 1282: 
        -: 1283:      //add embargo token to selected supply pile
        -: 1284:      state->embargoTokens[choice1]++;
        -: 1285:			
        -: 1286:      //trash card
        -: 1287:      discardCard(handPos, currentPlayer, state, 1);		
        -: 1288:      return 0;
        -: 1289: */
    #####: 1290:		return embargoCard(currentPlayer, handPos, state, choice1);
call    0 never executed
        -: 1291:			
        -: 1292:    case outpost:
        -: 1293:      //set outpost flag
    #####: 1294:      state->outpostPlayed++;
        -: 1295:			
        -: 1296:      //discard card
    #####: 1297:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1298:      return 0;
        -: 1299:		
        -: 1300:    case salvager:
        -: 1301:      //+1 buy
    #####: 1302:      state->numBuys++;
        -: 1303:			
    #####: 1304:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1305:	{
        -: 1306:	  //gain coins equal to trashed card
    #####: 1307:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1308:	  //trash card
    #####: 1309:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1310:	}
        -: 1311:			
        -: 1312:      //discard card
    #####: 1313:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1314:      return 0;
        -: 1315:		
        -: 1316:    case sea_hag:
        -: 1317:
    #####: 1318:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1319:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1320:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1321:	  state->discardCount[i]++;
    #####: 1322:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1323:	}
        -: 1324:      }
    #####: 1325:      return 0;
        -: 1326:
        -: 1327:		//return sea_hagCard(currentPlayer, state);
        -: 1328:			
        -: 1329:    case treasure_map:
        -: 1330:      //search hand for another treasure_map
    #####: 1331:      index = -1;
    #####: 1332:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1333:	{
    #####: 1334:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1335:	    {
    #####: 1336:	      index = i;
    #####: 1337:	      break;
        -: 1338:	    }
        -: 1339:	}
    #####: 1340:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1341:	{
        -: 1342:	  //trash both treasure cards
    #####: 1343:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1344:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1345:
        -: 1346:	  //gain 4 Gold cards
    #####: 1347:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1348:	    {
    #####: 1349:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1350:	    }
        -: 1351:				
        -: 1352:	  //return success
    #####: 1353:	  return 1;
        -: 1354:	}
        -: 1355:			
        -: 1356:      //no second treasure_map found in hand
    #####: 1357:      return -1;
        -: 1358:    }
        -: 1359:	
    #####: 1360:  return -1;
        -: 1361:}
        -: 1362:
function discardCard called 3 returned 100% blocks executed 78%
        3: 1363:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1364:{
        -: 1365:	
        -: 1366:  //if card is not trashed, added to Played pile 
        3: 1367:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1368:    {
        -: 1369:      //add card to played pile
        3: 1370:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        3: 1371:      state->playedCardCount++;
        -: 1372:    }
        -: 1373:	
        -: 1374:  //set played card to -1
        3: 1375:  state->hand[currentPlayer][handPos] = -1;
        -: 1376:	
        -: 1377:  //remove card from player's hand
        3: 1378:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1379:    {
        -: 1380:      //reduce number of cards in hand
    #####: 1381:      state->handCount[currentPlayer]--;
        -: 1382:    }
        3: 1383:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1384:    {
        -: 1385:      //reduce number of cards in hand
    #####: 1386:      state->handCount[currentPlayer]--;
        -: 1387:    }
        -: 1388:  else 	
        -: 1389:    {
        -: 1390:      //replace discarded card with last card in hand
        3: 1391:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1392:      //set last card to -1
        3: 1393:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1394:      //reduce number of cards in hand
        3: 1395:      state->handCount[currentPlayer]--;
        -: 1396:    }
        -: 1397:	
        3: 1398:  return 0;
        -: 1399:}
        -: 1400:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1401:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1402:{
        -: 1403:  //Note: supplyPos is enum of choosen card
        -: 1404:	
        -: 1405:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1406:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1407:    {
    #####: 1408:      return -1;
        -: 1409:    }
        -: 1410:	
        -: 1411:  //added card for [whoseTurn] current player:
        -: 1412:  // toFlag = 0 : add to discard
        -: 1413:  // toFlag = 1 : add to deck
        -: 1414:  // toFlag = 2 : add to hand
        -: 1415:
    #####: 1416:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1417:    {
    #####: 1418:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1419:      state->deckCount[player]++;
        -: 1420:    }
    #####: 1421:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1422:    {
    #####: 1423:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1424:      state->handCount[player]++;
        -: 1425:    }
        -: 1426:  else
        -: 1427:    {
    #####: 1428:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1429:      state->discardCount[player]++;
        -: 1430:    }
        -: 1431:	
        -: 1432:  //decrease number in supply pile
    #####: 1433:  state->supplyCount[supplyPos]--;
        -: 1434:	 
    #####: 1435:  return 0;
        -: 1436:}
        -: 1437:
function updateCoins called 4 returned 100% blocks executed 82%
        4: 1438:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1439:{
        -: 1440:  int i;
        -: 1441:	
        -: 1442:  //reset coin count
        4: 1443:  state->coins = 0;
        -: 1444:
        -: 1445:  //add coins for each Treasure card in player's hand
       24: 1446:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1447:    {
       20: 1448:      if (state->hand[player][i] == copper)
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
        -: 1449:	{
       12: 1450:	  state->coins += 1;
        -: 1451:	}
        8: 1452:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1453:	{
    #####: 1454:	  state->coins += 2;
        -: 1455:	}
        8: 1456:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1457:	{
    #####: 1458:	  state->coins += 3;
        -: 1459:	}	
        -: 1460:    }	
        -: 1461:
        -: 1462:  //add bonus
        4: 1463:  state->coins += bonus;
        -: 1464:
        4: 1465:  return 0;
        -: 1466:}
        -: 1467:
        -: 1468:
        -: 1469://end of dominion.c
        -: 1470:
unittest1.c
***** Testing whoseTurn() *****
Test player 0
Test PASSED
Test player 1
Test PASSED
***** whoseTurn() Tests Complete *****

Processing file 1 out of 1
File 'dominion.c'
Lines executed:27.73% of 559
Branches executed:30.94% of 417
Taken at least once:20.38% of 417
Calls executed:21.05% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:5
        -:    0:Programs:5
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 180 returned 100% blocks executed 83%
      180:    8:int compare(const void* a, const void* b) {
      180:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
      180:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       48:   12:    return -1;
      132:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 6 returned 100% blocks executed 88%
        6:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        6:   44:  SelectStream(1);
call    0 returned 100%
        6:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
        6:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        6:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       66:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      660:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      600:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        6:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        6:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        6:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        6:   89:      state->supplyCount[estate] = 8;
        6:   90:      state->supplyCount[duchy] = 8;
        6:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        6:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        6:  102:  state->supplyCount[silver] = 40;
        6:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      126:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
      990:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
      930:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       60:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:		{
       12:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        6:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       54:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       60:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      870:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       18:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
       12:  140:      state->deckCount[i] = 0;
       48:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       36:  143:	  state->deck[i][j] = estate;
       36:  144:	  state->deckCount[i]++;
        -:  145:	}
       96:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       84:  148:	  state->deck[i][j] = copper;
       84:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       18:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
       12:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       18:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       12:  166:      state->handCount[i] = 0;
       12:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      168:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      162:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        6:  182:  state->outpostPlayed = 0;
        6:  183:  state->phase = 0;
        6:  184:  state->numActions = 1;
        6:  185:  state->numBuys = 1;
        6:  186:  state->playedCardCount = 0;
        6:  187:  state->whoseTurn = 0;
        6:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       36:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       30:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        6:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        6:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 12 returned 100% blocks executed 94%
       12:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       12:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       12:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
       12:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      144:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      120:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      120:  216:    newDeck[newDeckPos] = state->deck[player][card];
      120:  217:    newDeckPos++;
      388:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
      268:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      120:  221:    state->deckCount[player]--;
        -:  222:  }
      132:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      120:  224:    state->deck[player][i] = newDeck[i];
      120:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       12:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 6 returned 100% blocks executed 100%
        6:  346:int whoseTurn(struct gameState *state) {
        6:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 18 returned 100% blocks executed 32%
       18:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
       18:  420:  int score = 0;
        -:  421:  //score from hand
       64:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
        -:  423:    {
       46:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       46:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 39% (fallthrough)
branch  1 taken 61%
       46:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       46:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       46:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       46:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
       18:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
       18:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
       18:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 38 returned 100% blocks executed 38%
       38:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       38:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       38:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       38:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       38:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       38:  576:    state->deckCount[player]--;
       38:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       38:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:/*************** REFACTORED CARDS ****************/
        -:  647:// BUG- drawntreasure = 1 instead of 0
function adventurerCard called 1 returned 100% blocks executed 67%
        1:  648:int adventurerCard(int currentPlayer, int temphand[], struct gameState *state) {
        -:  649:	//int drawntreasure=0;
        1:  650:	int drawntreasure=1;
        -:  651:	int cardDrawn;
        1:  652:	int z=0;
        -:  653:	
        3:  654:	while(drawntreasure<2){
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        1:  655:		if (state->deckCount[currentPlayer] < 1){ //if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  656:		shuffle(currentPlayer, state);
call    0 never executed
        -:  657:		}
        1:  658:		drawCard(currentPlayer, state);
call    0 returned 100%
        1:  659:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        1:  660:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        1:  661:			drawntreasure++;
        -:  662:		else{
    #####:  663:			temphand[z]=cardDrawn;
    #####:  664:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  665:			z++;
        -:  666:		}
        -:  667:	}
        2:  668:	while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  669:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  670:		z=z-1;
        -:  671:	}
        1:  672:	return 0;
        -:  673:}
        -:  674:
        -:  675:// BUG- only allows 2 cards to be drawn
function smithyCard called 1 returned 100% blocks executed 100%
        1:  676:int smithyCard(int currentPlayer, int handPos, struct gameState *state) {
        -:  677:	int i;
        -:  678:	//+3 Cards
        3:  679:	for (i = 0; i < 2; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  680:	//for (i = 0; i < 3; i++)
        -:  681:	{
        2:  682:		drawCard(currentPlayer, state);
call    0 returned 100%
        -:  683:	}
        -:  684:	
        -:  685:	//discard card from hand
        1:  686:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  687:	return 0;
        -:  688:}
        -:  689:
        -:  690:// BUG- allows only 1 action rather than 2
function villageCard called 1 returned 100% blocks executed 100%
        1:  691:int villageCard(int currentPlayer, int handPos, struct gameState *state) {
        -:  692:	//+1 Card
        1:  693:	drawCard(currentPlayer, state);
call    0 returned 100%
        -:  694:	
        -:  695:	//+2 Actions
        1:  696:	state->numActions = state->numActions + 1;
        -:  697:	//state->numActions = state->numActions + 2;
        -:  698:	
        -:  699:	//discard played card from hand
        1:  700:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  701:	return 0;
        -:  702:}
        -:  703:
        -:  704:// BUG- +3 cards insead of +4 cards
function council_roomCard called 1 returned 100% blocks executed 100%
        1:  705:int council_roomCard(int currentPlayer, int handPos, struct gameState *state) {
        -:  706:	//+4 Cards
        -:  707:	int i;
        4:  708:	for (i = 1; i < 4; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  709:	//for (i = 0; i < 4; i++)
        -:  710:	{
        3:  711:		drawCard(currentPlayer, state);
call    0 returned 100%
        -:  712:	}
        -:  713:
        -:  714:	//+1 Buy
        1:  715:	state->numBuys++;
        -:  716:
        -:  717:	//Each other player draws a card
        3:  718:	for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  719:	{
        2:  720:		if ( i != currentPlayer )
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  721:		{
        1:  722:			drawCard(i, state);
call    0 returned 100%
        -:  723:		}
        -:  724:	}
        -:  725:
        -:  726:	//put played card in played card pile
        1:  727:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  728:
        1:  729:	return 0;
        -:  730:}
        -:  731:
        -:  732:/*
        -:  733:int sea_hagCard(int currentPlayer, struct gameState *state) {
        -:  734:	for (int i = 0; i < state->numPlayers; i++) {
        -:  735:		if (i != currentPlayer){
        -:  736:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
        -:  737:			state->deckCount[i]--;
        -:  738:			state->discardCount[i]++;
        -:  739:			state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:  740:		}
        -:  741:	}
        -:  742:	return 0;
        -:  743:}
        -:  744:*/
        -:  745:
function embargoCard called 0 returned 0% blocks executed 0%
    #####:  746:int embargoCard(int currentPlayer, int handPos, struct gameState *state, int choice1) {
        -:  747:	//+2 Coins
    #####:  748:	state->coins = state->coins + 2;
        -:  749:	
        -:  750:	//see if selected pile is in play
    #####:  751:	if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -:  752:	{
    #####:  753:		return -1;
        -:  754:	}
        -:  755:	
        -:  756:	//add embargo token to selected supply pile
    #####:  757:	state->embargoTokens[choice1]++;
        -:  758:	
        -:  759:	//trash card
    #####:  760:	discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  761:	return 0;
        -:  762:}
        -:  763:/*********************************************************/
        -:  764:
function cardEffect called 4 returned 100% blocks executed 4%
        4:  765:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  766:{
        -:  767:  int i;
        -:  768:  int j;
        -:  769:  int k;
        -:  770:  int x;
        -:  771:  int index;
        4:  772:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        4:  773:  int nextPlayer = currentPlayer + 1;
        -:  774:
        4:  775:  int tributeRevealedCards[2] = {-1, -1};
        -:  776:  int temphand[MAX_HAND];// moved above the if statement
        -:  777:  //int drawntreasure=0;
        -:  778:  //int cardDrawn;
        4:  779:  int z = 0;// this is the counter for the temp hand
        4:  780:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  781:    nextPlayer = 0;
        -:  782:  }
        -:  783:  
        -:  784:	
        -:  785:  //uses switch to select card and perform actions
        4:  786:  switch( card ) 
branch  0 taken 25%
branch  1 taken 25%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 25%
branch  7 taken 25%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  787:    {
        -:  788:    case adventurer:
        -:  789:/*
        -:  790:      while(drawntreasure<2){
        -:  791:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  792:	  shuffle(currentPlayer, state);
        -:  793:	}
        -:  794:	drawCard(currentPlayer, state);
        -:  795:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  796:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  797:	  drawntreasure++;
        -:  798:	else{
        -:  799:	  temphand[z]=cardDrawn;
        -:  800:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  801:	  z++;
        -:  802:	}
        -:  803:      }
        -:  804:      while(z-1>=0){
        -:  805:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  806:	z=z-1;
        -:  807:      }
        -:  808:      return 0;
        -:  809:*/
        1:  810:			return adventurerCard(currentPlayer, temphand, state);
call    0 returned 100%
        -:  811:			
        -:  812:    case council_room:
        -:  813:/*
        -:  814:      //+4 Cards
        -:  815:      for (i = 0; i < 4; i++)
        -:  816:	{
        -:  817:	  drawCard(currentPlayer, state);
        -:  818:	}
        -:  819:			
        -:  820:      //+1 Buy
        -:  821:      state->numBuys++;
        -:  822:			
        -:  823:      //Each other player draws a card
        -:  824:      for (i = 0; i < state->numPlayers; i++)
        -:  825:	{
        -:  826:	  if ( i != currentPlayer )
        -:  827:	    {
        -:  828:	      drawCard(i, state);
        -:  829:	    }
        -:  830:	}
        -:  831:			
        -:  832:      //put played card in played card pile
        -:  833:      discardCard(handPos, currentPlayer, state, 0);
        -:  834:			
        -:  835:      return 0;
        -:  836:*/
        1:  837:		return council_roomCard(currentPlayer, handPos, state);
call    0 returned 100%
        -:  838:			
        -:  839:    case feast:
        -:  840:      //gain card with cost up to 5
        -:  841:      //Backup hand
    #####:  842:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  843:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  844:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  845:      }
        -:  846:      //Backup hand
        -:  847:
        -:  848:      //Update Coins for Buy
    #####:  849:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  850:      x = 1;//Condition to loop on
    #####:  851:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  852:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  853:	  if (DEBUG)
        -:  854:	    printf("None of that card left, sorry!\n");
        -:  855:
        -:  856:	  if (DEBUG){
        -:  857:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  858:	  }
        -:  859:	}
    #####:  860:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  861:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  862:
        -:  863:	  if (DEBUG){
        -:  864:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  865:	  }
        -:  866:	}
        -:  867:	else{
        -:  868:
        -:  869:	  if (DEBUG){
        -:  870:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  871:	  }
        -:  872:
    #####:  873:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  874:	  x = 0;//No more buying cards
        -:  875:
        -:  876:	  if (DEBUG){
        -:  877:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  878:	  }
        -:  879:
        -:  880:	}
        -:  881:      }     
        -:  882:
        -:  883:      //Reset Hand
    #####:  884:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  885:	state->hand[currentPlayer][i] = temphand[i];
    #####:  886:	temphand[i] = -1;
        -:  887:      }
        -:  888:      //Reset Hand
        -:  889:      			
    #####:  890:      return 0;
        -:  891:			
        -:  892:    case gardens:
    #####:  893:      return -1;
        -:  894:			
        -:  895:    case mine:
    #####:  896:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  897:
    #####:  898:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  899:	{
    #####:  900:	  return -1;
        -:  901:	}
        -:  902:		
    #####:  903:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  904:	{
    #####:  905:	  return -1;
        -:  906:	}
        -:  907:
    #####:  908:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  909:	{
    #####:  910:	  return -1;
        -:  911:	}
        -:  912:
    #####:  913:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  914:
        -:  915:      //discard card from hand
    #####:  916:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  917:
        -:  918:      //discard trashed card
    #####:  919:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  920:	{
    #####:  921:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  922:	    {
    #####:  923:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  924:	      break;
        -:  925:	    }
        -:  926:	}
        -:  927:			
    #####:  928:      return 0;
        -:  929:			
        -:  930:    case remodel:
    #####:  931:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  932:
    #####:  933:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  934:	{
    #####:  935:	  return -1;
        -:  936:	}
        -:  937:
    #####:  938:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  939:
        -:  940:      //discard card from hand
    #####:  941:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  942:
        -:  943:      //discard trashed card
    #####:  944:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  945:	{
    #####:  946:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  947:	    {
    #####:  948:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  949:	      break;
        -:  950:	    }
        -:  951:	}
        -:  952:
        -:  953:
    #####:  954:      return 0;
        -:  955:		
        -:  956:    case smithy:
        -:  957:/*
        -:  958:	  //+3 Cards
        -:  959:      for (i = 0; i < 3; i++)
        -:  960:	{
        -:  961:	  drawCard(currentPlayer, state);
        -:  962:	}
        -:  963:			
        -:  964:      //discard card from hand
        -:  965:      discardCard(handPos, currentPlayer, state, 0);
        -:  966:      return 0;
        -:  967: */
        1:  968:		return smithyCard(currentPlayer, handPos, state);
call    0 returned 100%
        -:  969:		
        -:  970:    case village:
        -:  971:/*
        -:  972:      //+1 Card
        -:  973:      drawCard(currentPlayer, state);
        -:  974:			
        -:  975:      //+2 Actions
        -:  976:      state->numActions = state->numActions + 2;
        -:  977:			
        -:  978:      //discard played card from hand
        -:  979:      discardCard(handPos, currentPlayer, state, 0);
        -:  980:      return 0;
        -:  981:*/
        1:  982:		return villageCard(currentPlayer, handPos, state);
call    0 returned 100%
        -:  983:			
        -:  984:    case baron:
    #####:  985:      state->numBuys++;//Increase buys by 1!
    #####:  986:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  987:	int p = 0;//Iterator for hand!
    #####:  988:	int card_not_discarded = 1;//Flag for discard set!
    #####:  989:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  990:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  991:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  992:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  993:	    state->discardCount[currentPlayer]++;
    #####:  994:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  995:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  996:	    }
    #####:  997:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  998:	    state->handCount[currentPlayer]--;
    #####:  999:	    card_not_discarded = 0;//Exit the loop
        -: 1000:	  }
    #####: 1001:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1002:	    if(DEBUG) {
        -: 1003:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1004:	      printf("Must gain an estate if there are any\n");
        -: 1005:	    }
    #####: 1006:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1007:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1008:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1009:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1010:		isGameOver(state);
call    0 never executed
        -: 1011:	      }
        -: 1012:	    }
    #####: 1013:	    card_not_discarded = 0;//Exit the loop
        -: 1014:	  }
        -: 1015:			    
        -: 1016:	  else{
    #####: 1017:	    p++;//Next card
        -: 1018:	  }
        -: 1019:	}
        -: 1020:      }
        -: 1021:			    
        -: 1022:      else{
    #####: 1023:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1024:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1025:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1026:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1027:	    isGameOver(state);
call    0 never executed
        -: 1028:	  }
        -: 1029:	}
        -: 1030:      }
        -: 1031:	    
        -: 1032:      
    #####: 1033:      return 0;
        -: 1034:		
        -: 1035:    case great_hall:
        -: 1036:      //+1 Card
    #####: 1037:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1038:			
        -: 1039:      //+1 Actions
    #####: 1040:      state->numActions++;
        -: 1041:			
        -: 1042:      //discard card from hand
    #####: 1043:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1044:      return 0;
        -: 1045:		
        -: 1046:    case minion:
        -: 1047:      //+1 action
    #####: 1048:      state->numActions++;
        -: 1049:			
        -: 1050:      //discard card from hand
    #####: 1051:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1052:			
    #####: 1053:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1054:	{
    #####: 1055:	  state->coins = state->coins + 2;
        -: 1056:	}
        -: 1057:			
    #####: 1058:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1059:	{
        -: 1060:	  //discard hand
    #####: 1061:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1062:	    {
    #####: 1063:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1064:	    }
        -: 1065:				
        -: 1066:	  //draw 4
    #####: 1067:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1068:	    {
    #####: 1069:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1070:	    }
        -: 1071:				
        -: 1072:	  //other players discard hand and redraw if hand size > 4
    #####: 1073:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1074:	    {
    #####: 1075:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1076:		{
    #####: 1077:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1078:		    {
        -: 1079:		      //discard hand
    #####: 1080:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1081:			{
    #####: 1082:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1083:			}
        -: 1084:							
        -: 1085:		      //draw 4
    #####: 1086:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1087:			{
    #####: 1088:			  drawCard(i, state);
call    0 never executed
        -: 1089:			}
        -: 1090:		    }
        -: 1091:		}
        -: 1092:	    }
        -: 1093:				
        -: 1094:	}
    #####: 1095:      return 0;
        -: 1096:		
        -: 1097:    case steward:
    #####: 1098:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1099:	{
        -: 1100:	  //+2 cards
    #####: 1101:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1102:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1103:	}
    #####: 1104:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1105:	{
        -: 1106:	  //+2 coins
    #####: 1107:	  state->coins = state->coins + 2;
        -: 1108:	}
        -: 1109:      else
        -: 1110:	{
        -: 1111:	  //trash 2 cards in hand
    #####: 1112:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1113:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1114:	}
        -: 1115:			
        -: 1116:      //discard card from hand
    #####: 1117:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1118:      return 0;
        -: 1119:		
        -: 1120:    case tribute:
    #####: 1121:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1122:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1123:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1124:	  state->deckCount[nextPlayer]--;
        -: 1125:	}
    #####: 1126:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1127:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1128:	  state->discardCount[nextPlayer]--;
        -: 1129:	}
        -: 1130:	else{
        -: 1131:	  //No Card to Reveal
        -: 1132:	  if (DEBUG){
        -: 1133:	    printf("No cards to reveal\n");
        -: 1134:	  }
        -: 1135:	}
        -: 1136:      }
        -: 1137:	    
        -: 1138:      else{
    #####: 1139:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1140:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1141:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1142:	    state->deckCount[nextPlayer]++;
    #####: 1143:	    state->discard[nextPlayer][i] = -1;
    #####: 1144:	    state->discardCount[nextPlayer]--;
        -: 1145:	  }
        -: 1146:			    
    #####: 1147:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1148:	} 
    #####: 1149:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1150:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1151:	state->deckCount[nextPlayer]--;
    #####: 1152:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1153:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1154:	state->deckCount[nextPlayer]--;
        -: 1155:      }    
        -: 1156:		       
    #####: 1157:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1158:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1159:	state->playedCardCount++;
    #####: 1160:	tributeRevealedCards[1] = -1;
        -: 1161:      }
        -: 1162:
    #####: 1163:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1164:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1165:	  state->coins += 2;
        -: 1166:	}
        -: 1167:		    
    #####: 1168:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1169:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1170:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1171:	}
        -: 1172:	else{//Action Card
    #####: 1173:	  state->numActions = state->numActions + 2;
        -: 1174:	}
        -: 1175:      }
        -: 1176:	    
    #####: 1177:      return 0;
        -: 1178:		
        -: 1179:    case ambassador:
    #####: 1180:      j = 0;		//used to check if player has enough cards to discard
        -: 1181:
    #####: 1182:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1183:	{
    #####: 1184:	  return -1;				
        -: 1185:	}
        -: 1186:
    #####: 1187:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1188:	{
    #####: 1189:	  return -1;
        -: 1190:	}
        -: 1191:
    #####: 1192:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1193:	{
    #####: 1194:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1195:	    {
    #####: 1196:	      j++;
        -: 1197:	    }
        -: 1198:	}
    #####: 1199:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1200:	{
    #####: 1201:	  return -1;				
        -: 1202:	}
        -: 1203:
        -: 1204:      if (DEBUG) 
        -: 1205:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1206:
        -: 1207:      //increase supply count for choosen card by amount being discarded
    #####: 1208:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1209:			
        -: 1210:      //each other player gains a copy of revealed card
    #####: 1211:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1212:	{
    #####: 1213:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1214:	    {
    #####: 1215:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1216:	    }
        -: 1217:	}
        -: 1218:
        -: 1219:      //discard played card from hand
    #####: 1220:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1221:
        -: 1222:      //trash copies of cards returned to supply
    #####: 1223:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1224:	{
    #####: 1225:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1226:	    {
    #####: 1227:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1228:		{
    #####: 1229:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1230:		  break;
        -: 1231:		}
        -: 1232:	    }
        -: 1233:	}			
        -: 1234:
    #####: 1235:      return 0;
        -: 1236:		
        -: 1237:    case cutpurse:
        -: 1238:
    #####: 1239:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1240:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1241:	{
    #####: 1242:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1243:	    {
    #####: 1244:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1245:		{
    #####: 1246:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1247:		    {
    #####: 1248:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1249:		      break;
        -: 1250:		    }
    #####: 1251:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1252:		    {
    #####: 1253:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1254:			{
        -: 1255:			  if (DEBUG)
        -: 1256:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1257:			}	
    #####: 1258:		      break;
        -: 1259:		    }		
        -: 1260:		}
        -: 1261:					
        -: 1262:	    }
        -: 1263:				
        -: 1264:	}				
        -: 1265:
        -: 1266:      //discard played card from hand
    #####: 1267:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1268:
    #####: 1269:      return 0;
        -: 1270:
        -: 1271:		
        -: 1272:    case embargo:
        -: 1273:/*
        -: 1274:      //+2 Coins
        -: 1275:      state->coins = state->coins + 2;
        -: 1276:			
        -: 1277:      //see if selected pile is in play
        -: 1278:      if ( state->supplyCount[choice1] == -1 )
        -: 1279:	{
        -: 1280:	  return -1;
        -: 1281:	}
        -: 1282: 
        -: 1283:      //add embargo token to selected supply pile
        -: 1284:      state->embargoTokens[choice1]++;
        -: 1285:			
        -: 1286:      //trash card
        -: 1287:      discardCard(handPos, currentPlayer, state, 1);		
        -: 1288:      return 0;
        -: 1289: */
    #####: 1290:		return embargoCard(currentPlayer, handPos, state, choice1);
call    0 never executed
        -: 1291:			
        -: 1292:    case outpost:
        -: 1293:      //set outpost flag
    #####: 1294:      state->outpostPlayed++;
        -: 1295:			
        -: 1296:      //discard card
    #####: 1297:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1298:      return 0;
        -: 1299:		
        -: 1300:    case salvager:
        -: 1301:      //+1 buy
    #####: 1302:      state->numBuys++;
        -: 1303:			
    #####: 1304:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1305:	{
        -: 1306:	  //gain coins equal to trashed card
    #####: 1307:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1308:	  //trash card
    #####: 1309:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1310:	}
        -: 1311:			
        -: 1312:      //discard card
    #####: 1313:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1314:      return 0;
        -: 1315:		
        -: 1316:    case sea_hag:
        -: 1317:
    #####: 1318:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1319:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1320:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1321:	  state->discardCount[i]++;
    #####: 1322:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1323:	}
        -: 1324:      }
    #####: 1325:      return 0;
        -: 1326:
        -: 1327:		//return sea_hagCard(currentPlayer, state);
        -: 1328:			
        -: 1329:    case treasure_map:
        -: 1330:      //search hand for another treasure_map
    #####: 1331:      index = -1;
    #####: 1332:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1333:	{
    #####: 1334:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1335:	    {
    #####: 1336:	      index = i;
    #####: 1337:	      break;
        -: 1338:	    }
        -: 1339:	}
    #####: 1340:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1341:	{
        -: 1342:	  //trash both treasure cards
    #####: 1343:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1344:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1345:
        -: 1346:	  //gain 4 Gold cards
    #####: 1347:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1348:	    {
    #####: 1349:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1350:	    }
        -: 1351:				
        -: 1352:	  //return success
    #####: 1353:	  return 1;
        -: 1354:	}
        -: 1355:			
        -: 1356:      //no second treasure_map found in hand
    #####: 1357:      return -1;
        -: 1358:    }
        -: 1359:	
    #####: 1360:  return -1;
        -: 1361:}
        -: 1362:
function discardCard called 3 returned 100% blocks executed 78%
        3: 1363:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1364:{
        -: 1365:	
        -: 1366:  //if card is not trashed, added to Played pile 
        3: 1367:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1368:    {
        -: 1369:      //add card to played pile
        3: 1370:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        3: 1371:      state->playedCardCount++;
        -: 1372:    }
        -: 1373:	
        -: 1374:  //set played card to -1
        3: 1375:  state->hand[currentPlayer][handPos] = -1;
        -: 1376:	
        -: 1377:  //remove card from player's hand
        3: 1378:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1379:    {
        -: 1380:      //reduce number of cards in hand
    #####: 1381:      state->handCount[currentPlayer]--;
        -: 1382:    }
        3: 1383:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1384:    {
        -: 1385:      //reduce number of cards in hand
    #####: 1386:      state->handCount[currentPlayer]--;
        -: 1387:    }
        -: 1388:  else 	
        -: 1389:    {
        -: 1390:      //replace discarded card with last card in hand
        3: 1391:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1392:      //set last card to -1
        3: 1393:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1394:      //reduce number of cards in hand
        3: 1395:      state->handCount[currentPlayer]--;
        -: 1396:    }
        -: 1397:	
        3: 1398:  return 0;
        -: 1399:}
        -: 1400:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1401:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1402:{
        -: 1403:  //Note: supplyPos is enum of choosen card
        -: 1404:	
        -: 1405:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1406:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1407:    {
    #####: 1408:      return -1;
        -: 1409:    }
        -: 1410:	
        -: 1411:  //added card for [whoseTurn] current player:
        -: 1412:  // toFlag = 0 : add to discard
        -: 1413:  // toFlag = 1 : add to deck
        -: 1414:  // toFlag = 2 : add to hand
        -: 1415:
    #####: 1416:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1417:    {
    #####: 1418:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1419:      state->deckCount[player]++;
        -: 1420:    }
    #####: 1421:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1422:    {
    #####: 1423:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1424:      state->handCount[player]++;
        -: 1425:    }
        -: 1426:  else
        -: 1427:    {
    #####: 1428:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1429:      state->discardCount[player]++;
        -: 1430:    }
        -: 1431:	
        -: 1432:  //decrease number in supply pile
    #####: 1433:  state->supplyCount[supplyPos]--;
        -: 1434:	 
    #####: 1435:  return 0;
        -: 1436:}
        -: 1437:
function updateCoins called 6 returned 100% blocks executed 82%
        6: 1438:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1439:{
        -: 1440:  int i;
        -: 1441:	
        -: 1442:  //reset coin count
        6: 1443:  state->coins = 0;
        -: 1444:
        -: 1445:  //add coins for each Treasure card in player's hand
       36: 1446:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1447:    {
       30: 1448:      if (state->hand[player][i] == copper)
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
        -: 1449:	{
       18: 1450:	  state->coins += 1;
        -: 1451:	}
       12: 1452:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1453:	{
    #####: 1454:	  state->coins += 2;
        -: 1455:	}
       12: 1456:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1457:	{
    #####: 1458:	  state->coins += 3;
        -: 1459:	}	
        -: 1460:    }	
        -: 1461:
        -: 1462:  //add bonus
        6: 1463:  state->coins += bonus;
        -: 1464:
        6: 1465:  return 0;
        -: 1466:}
        -: 1467:
        -: 1468:
        -: 1469://end of dominion.c
        -: 1470:
unittest2.c
***** Testing isGameOver() *****
test if game over when none of the supply is empty...
Test PASSED
test if game over when Province card stack is empty...
Test PASSED
test if game over when 1 supply card stack is empty...
Test PASSED
test if game over when 2 supply card stacks are empty...
Test PASSED
test if game over when 3 supply card stacks are empty...
Test PASSED
***** isGameOver() Tests Complete *****

Processing file 1 out of 1
File 'dominion.c'
Lines executed:29.34% of 559
Branches executed:32.85% of 417
Taken at least once:22.06% of 417
Calls executed:21.05% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:6
        -:    0:Programs:6
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 210 returned 100% blocks executed 83%
      210:    8:int compare(const void* a, const void* b) {
      210:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
      210:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       56:   12:    return -1;
      154:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 7 returned 100% blocks executed 88%
        7:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        7:   44:  SelectStream(1);
call    0 returned 100%
        7:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
        7:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        7:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       77:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      770:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      700:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        7:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        7:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        7:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        7:   89:      state->supplyCount[estate] = 8;
        7:   90:      state->supplyCount[duchy] = 8;
        7:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        7:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        7:  102:  state->supplyCount[silver] = 40;
        7:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      147:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     1155:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     1085:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       70:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:		{
       14:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        7:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       63:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       70:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1015:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       21:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
       14:  140:      state->deckCount[i] = 0;
       56:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       42:  143:	  state->deck[i][j] = estate;
       42:  144:	  state->deckCount[i]++;
        -:  145:	}
      112:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       98:  148:	  state->deck[i][j] = copper;
       98:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       21:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
       14:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       21:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       14:  166:      state->handCount[i] = 0;
       14:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      196:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      189:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        7:  182:  state->outpostPlayed = 0;
        7:  183:  state->phase = 0;
        7:  184:  state->numActions = 1;
        7:  185:  state->numBuys = 1;
        7:  186:  state->playedCardCount = 0;
        7:  187:  state->whoseTurn = 0;
        7:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       42:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       35:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        7:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        7:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 14 returned 100% blocks executed 94%
       14:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       14:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       14:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
       14:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      168:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      140:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      140:  216:    newDeck[newDeckPos] = state->deck[player][card];
      140:  217:    newDeckPos++;
      456:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
      316:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      140:  221:    state->deckCount[player]--;
        -:  222:  }
      154:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      140:  224:    state->deck[player][i] = newDeck[i];
      140:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       14:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 6 returned 100% blocks executed 100%
        6:  346:int whoseTurn(struct gameState *state) {
        6:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 5 returned 100% blocks executed 91%
        5:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        5:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        3:  401:  j = 0;
       78:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
       75:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  405:	{
        3:  406:	  j++;
        -:  407:	}
        -:  408:    }
        3:  409:  if ( j >= 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
        3:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 18 returned 100% blocks executed 32%
       18:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
       18:  420:  int score = 0;
        -:  421:  //score from hand
       64:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
        -:  423:    {
       46:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       46:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 39% (fallthrough)
branch  1 taken 61%
       46:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       46:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       46:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       46:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
       18:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
       18:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
       18:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 43 returned 100% blocks executed 38%
       43:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       43:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       43:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       43:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       43:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       43:  576:    state->deckCount[player]--;
       43:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       43:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:/*************** REFACTORED CARDS ****************/
        -:  647:// BUG- drawntreasure = 1 instead of 0
function adventurerCard called 1 returned 100% blocks executed 67%
        1:  648:int adventurerCard(int currentPlayer, int temphand[], struct gameState *state) {
        -:  649:	//int drawntreasure=0;
        1:  650:	int drawntreasure=1;
        -:  651:	int cardDrawn;
        1:  652:	int z=0;
        -:  653:	
        3:  654:	while(drawntreasure<2){
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        1:  655:		if (state->deckCount[currentPlayer] < 1){ //if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  656:		shuffle(currentPlayer, state);
call    0 never executed
        -:  657:		}
        1:  658:		drawCard(currentPlayer, state);
call    0 returned 100%
        1:  659:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        1:  660:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        1:  661:			drawntreasure++;
        -:  662:		else{
    #####:  663:			temphand[z]=cardDrawn;
    #####:  664:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  665:			z++;
        -:  666:		}
        -:  667:	}
        2:  668:	while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  669:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  670:		z=z-1;
        -:  671:	}
        1:  672:	return 0;
        -:  673:}
        -:  674:
        -:  675:// BUG- only allows 2 cards to be drawn
function smithyCard called 1 returned 100% blocks executed 100%
        1:  676:int smithyCard(int currentPlayer, int handPos, struct gameState *state) {
        -:  677:	int i;
        -:  678:	//+3 Cards
        3:  679:	for (i = 0; i < 2; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  680:	//for (i = 0; i < 3; i++)
        -:  681:	{
        2:  682:		drawCard(currentPlayer, state);
call    0 returned 100%
        -:  683:	}
        -:  684:	
        -:  685:	//discard card from hand
        1:  686:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  687:	return 0;
        -:  688:}
        -:  689:
        -:  690:// BUG- allows only 1 action rather than 2
function villageCard called 1 returned 100% blocks executed 100%
        1:  691:int villageCard(int currentPlayer, int handPos, struct gameState *state) {
        -:  692:	//+1 Card
        1:  693:	drawCard(currentPlayer, state);
call    0 returned 100%
        -:  694:	
        -:  695:	//+2 Actions
        1:  696:	state->numActions = state->numActions + 1;
        -:  697:	//state->numActions = state->numActions + 2;
        -:  698:	
        -:  699:	//discard played card from hand
        1:  700:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  701:	return 0;
        -:  702:}
        -:  703:
        -:  704:// BUG- +3 cards insead of +4 cards
function council_roomCard called 1 returned 100% blocks executed 100%
        1:  705:int council_roomCard(int currentPlayer, int handPos, struct gameState *state) {
        -:  706:	//+4 Cards
        -:  707:	int i;
        4:  708:	for (i = 1; i < 4; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  709:	//for (i = 0; i < 4; i++)
        -:  710:	{
        3:  711:		drawCard(currentPlayer, state);
call    0 returned 100%
        -:  712:	}
        -:  713:
        -:  714:	//+1 Buy
        1:  715:	state->numBuys++;
        -:  716:
        -:  717:	//Each other player draws a card
        3:  718:	for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  719:	{
        2:  720:		if ( i != currentPlayer )
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  721:		{
        1:  722:			drawCard(i, state);
call    0 returned 100%
        -:  723:		}
        -:  724:	}
        -:  725:
        -:  726:	//put played card in played card pile
        1:  727:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  728:
        1:  729:	return 0;
        -:  730:}
        -:  731:
        -:  732:/*
        -:  733:int sea_hagCard(int currentPlayer, struct gameState *state) {
        -:  734:	for (int i = 0; i < state->numPlayers; i++) {
        -:  735:		if (i != currentPlayer){
        -:  736:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
        -:  737:			state->deckCount[i]--;
        -:  738:			state->discardCount[i]++;
        -:  739:			state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:  740:		}
        -:  741:	}
        -:  742:	return 0;
        -:  743:}
        -:  744:*/
        -:  745:
function embargoCard called 0 returned 0% blocks executed 0%
    #####:  746:int embargoCard(int currentPlayer, int handPos, struct gameState *state, int choice1) {
        -:  747:	//+2 Coins
    #####:  748:	state->coins = state->coins + 2;
        -:  749:	
        -:  750:	//see if selected pile is in play
    #####:  751:	if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -:  752:	{
    #####:  753:		return -1;
        -:  754:	}
        -:  755:	
        -:  756:	//add embargo token to selected supply pile
    #####:  757:	state->embargoTokens[choice1]++;
        -:  758:	
        -:  759:	//trash card
    #####:  760:	discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  761:	return 0;
        -:  762:}
        -:  763:/*********************************************************/
        -:  764:
function cardEffect called 4 returned 100% blocks executed 4%
        4:  765:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  766:{
        -:  767:  int i;
        -:  768:  int j;
        -:  769:  int k;
        -:  770:  int x;
        -:  771:  int index;
        4:  772:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        4:  773:  int nextPlayer = currentPlayer + 1;
        -:  774:
        4:  775:  int tributeRevealedCards[2] = {-1, -1};
        -:  776:  int temphand[MAX_HAND];// moved above the if statement
        -:  777:  //int drawntreasure=0;
        -:  778:  //int cardDrawn;
        4:  779:  int z = 0;// this is the counter for the temp hand
        4:  780:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  781:    nextPlayer = 0;
        -:  782:  }
        -:  783:  
        -:  784:	
        -:  785:  //uses switch to select card and perform actions
        4:  786:  switch( card ) 
branch  0 taken 25%
branch  1 taken 25%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 25%
branch  7 taken 25%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  787:    {
        -:  788:    case adventurer:
        -:  789:/*
        -:  790:      while(drawntreasure<2){
        -:  791:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  792:	  shuffle(currentPlayer, state);
        -:  793:	}
        -:  794:	drawCard(currentPlayer, state);
        -:  795:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  796:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  797:	  drawntreasure++;
        -:  798:	else{
        -:  799:	  temphand[z]=cardDrawn;
        -:  800:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  801:	  z++;
        -:  802:	}
        -:  803:      }
        -:  804:      while(z-1>=0){
        -:  805:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  806:	z=z-1;
        -:  807:      }
        -:  808:      return 0;
        -:  809:*/
        1:  810:			return adventurerCard(currentPlayer, temphand, state);
call    0 returned 100%
        -:  811:			
        -:  812:    case council_room:
        -:  813:/*
        -:  814:      //+4 Cards
        -:  815:      for (i = 0; i < 4; i++)
        -:  816:	{
        -:  817:	  drawCard(currentPlayer, state);
        -:  818:	}
        -:  819:			
        -:  820:      //+1 Buy
        -:  821:      state->numBuys++;
        -:  822:			
        -:  823:      //Each other player draws a card
        -:  824:      for (i = 0; i < state->numPlayers; i++)
        -:  825:	{
        -:  826:	  if ( i != currentPlayer )
        -:  827:	    {
        -:  828:	      drawCard(i, state);
        -:  829:	    }
        -:  830:	}
        -:  831:			
        -:  832:      //put played card in played card pile
        -:  833:      discardCard(handPos, currentPlayer, state, 0);
        -:  834:			
        -:  835:      return 0;
        -:  836:*/
        1:  837:		return council_roomCard(currentPlayer, handPos, state);
call    0 returned 100%
        -:  838:			
        -:  839:    case feast:
        -:  840:      //gain card with cost up to 5
        -:  841:      //Backup hand
    #####:  842:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  843:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  844:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  845:      }
        -:  846:      //Backup hand
        -:  847:
        -:  848:      //Update Coins for Buy
    #####:  849:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  850:      x = 1;//Condition to loop on
    #####:  851:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  852:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  853:	  if (DEBUG)
        -:  854:	    printf("None of that card left, sorry!\n");
        -:  855:
        -:  856:	  if (DEBUG){
        -:  857:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  858:	  }
        -:  859:	}
    #####:  860:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  861:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  862:
        -:  863:	  if (DEBUG){
        -:  864:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  865:	  }
        -:  866:	}
        -:  867:	else{
        -:  868:
        -:  869:	  if (DEBUG){
        -:  870:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  871:	  }
        -:  872:
    #####:  873:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  874:	  x = 0;//No more buying cards
        -:  875:
        -:  876:	  if (DEBUG){
        -:  877:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  878:	  }
        -:  879:
        -:  880:	}
        -:  881:      }     
        -:  882:
        -:  883:      //Reset Hand
    #####:  884:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  885:	state->hand[currentPlayer][i] = temphand[i];
    #####:  886:	temphand[i] = -1;
        -:  887:      }
        -:  888:      //Reset Hand
        -:  889:      			
    #####:  890:      return 0;
        -:  891:			
        -:  892:    case gardens:
    #####:  893:      return -1;
        -:  894:			
        -:  895:    case mine:
    #####:  896:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  897:
    #####:  898:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  899:	{
    #####:  900:	  return -1;
        -:  901:	}
        -:  902:		
    #####:  903:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  904:	{
    #####:  905:	  return -1;
        -:  906:	}
        -:  907:
    #####:  908:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  909:	{
    #####:  910:	  return -1;
        -:  911:	}
        -:  912:
    #####:  913:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  914:
        -:  915:      //discard card from hand
    #####:  916:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  917:
        -:  918:      //discard trashed card
    #####:  919:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  920:	{
    #####:  921:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  922:	    {
    #####:  923:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  924:	      break;
        -:  925:	    }
        -:  926:	}
        -:  927:			
    #####:  928:      return 0;
        -:  929:			
        -:  930:    case remodel:
    #####:  931:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  932:
    #####:  933:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  934:	{
    #####:  935:	  return -1;
        -:  936:	}
        -:  937:
    #####:  938:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  939:
        -:  940:      //discard card from hand
    #####:  941:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  942:
        -:  943:      //discard trashed card
    #####:  944:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  945:	{
    #####:  946:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  947:	    {
    #####:  948:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  949:	      break;
        -:  950:	    }
        -:  951:	}
        -:  952:
        -:  953:
    #####:  954:      return 0;
        -:  955:		
        -:  956:    case smithy:
        -:  957:/*
        -:  958:	  //+3 Cards
        -:  959:      for (i = 0; i < 3; i++)
        -:  960:	{
        -:  961:	  drawCard(currentPlayer, state);
        -:  962:	}
        -:  963:			
        -:  964:      //discard card from hand
        -:  965:      discardCard(handPos, currentPlayer, state, 0);
        -:  966:      return 0;
        -:  967: */
        1:  968:		return smithyCard(currentPlayer, handPos, state);
call    0 returned 100%
        -:  969:		
        -:  970:    case village:
        -:  971:/*
        -:  972:      //+1 Card
        -:  973:      drawCard(currentPlayer, state);
        -:  974:			
        -:  975:      //+2 Actions
        -:  976:      state->numActions = state->numActions + 2;
        -:  977:			
        -:  978:      //discard played card from hand
        -:  979:      discardCard(handPos, currentPlayer, state, 0);
        -:  980:      return 0;
        -:  981:*/
        1:  982:		return villageCard(currentPlayer, handPos, state);
call    0 returned 100%
        -:  983:			
        -:  984:    case baron:
    #####:  985:      state->numBuys++;//Increase buys by 1!
    #####:  986:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  987:	int p = 0;//Iterator for hand!
    #####:  988:	int card_not_discarded = 1;//Flag for discard set!
    #####:  989:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  990:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  991:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  992:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  993:	    state->discardCount[currentPlayer]++;
    #####:  994:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  995:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  996:	    }
    #####:  997:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  998:	    state->handCount[currentPlayer]--;
    #####:  999:	    card_not_discarded = 0;//Exit the loop
        -: 1000:	  }
    #####: 1001:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1002:	    if(DEBUG) {
        -: 1003:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1004:	      printf("Must gain an estate if there are any\n");
        -: 1005:	    }
    #####: 1006:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1007:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1008:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1009:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1010:		isGameOver(state);
call    0 never executed
        -: 1011:	      }
        -: 1012:	    }
    #####: 1013:	    card_not_discarded = 0;//Exit the loop
        -: 1014:	  }
        -: 1015:			    
        -: 1016:	  else{
    #####: 1017:	    p++;//Next card
        -: 1018:	  }
        -: 1019:	}
        -: 1020:      }
        -: 1021:			    
        -: 1022:      else{
    #####: 1023:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1024:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1025:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1026:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1027:	    isGameOver(state);
call    0 never executed
        -: 1028:	  }
        -: 1029:	}
        -: 1030:      }
        -: 1031:	    
        -: 1032:      
    #####: 1033:      return 0;
        -: 1034:		
        -: 1035:    case great_hall:
        -: 1036:      //+1 Card
    #####: 1037:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1038:			
        -: 1039:      //+1 Actions
    #####: 1040:      state->numActions++;
        -: 1041:			
        -: 1042:      //discard card from hand
    #####: 1043:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1044:      return 0;
        -: 1045:		
        -: 1046:    case minion:
        -: 1047:      //+1 action
    #####: 1048:      state->numActions++;
        -: 1049:			
        -: 1050:      //discard card from hand
    #####: 1051:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1052:			
    #####: 1053:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1054:	{
    #####: 1055:	  state->coins = state->coins + 2;
        -: 1056:	}
        -: 1057:			
    #####: 1058:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1059:	{
        -: 1060:	  //discard hand
    #####: 1061:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1062:	    {
    #####: 1063:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1064:	    }
        -: 1065:				
        -: 1066:	  //draw 4
    #####: 1067:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1068:	    {
    #####: 1069:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1070:	    }
        -: 1071:				
        -: 1072:	  //other players discard hand and redraw if hand size > 4
    #####: 1073:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1074:	    {
    #####: 1075:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1076:		{
    #####: 1077:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1078:		    {
        -: 1079:		      //discard hand
    #####: 1080:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1081:			{
    #####: 1082:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1083:			}
        -: 1084:							
        -: 1085:		      //draw 4
    #####: 1086:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1087:			{
    #####: 1088:			  drawCard(i, state);
call    0 never executed
        -: 1089:			}
        -: 1090:		    }
        -: 1091:		}
        -: 1092:	    }
        -: 1093:				
        -: 1094:	}
    #####: 1095:      return 0;
        -: 1096:		
        -: 1097:    case steward:
    #####: 1098:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1099:	{
        -: 1100:	  //+2 cards
    #####: 1101:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1102:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1103:	}
    #####: 1104:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1105:	{
        -: 1106:	  //+2 coins
    #####: 1107:	  state->coins = state->coins + 2;
        -: 1108:	}
        -: 1109:      else
        -: 1110:	{
        -: 1111:	  //trash 2 cards in hand
    #####: 1112:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1113:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1114:	}
        -: 1115:			
        -: 1116:      //discard card from hand
    #####: 1117:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1118:      return 0;
        -: 1119:		
        -: 1120:    case tribute:
    #####: 1121:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1122:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1123:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1124:	  state->deckCount[nextPlayer]--;
        -: 1125:	}
    #####: 1126:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1127:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1128:	  state->discardCount[nextPlayer]--;
        -: 1129:	}
        -: 1130:	else{
        -: 1131:	  //No Card to Reveal
        -: 1132:	  if (DEBUG){
        -: 1133:	    printf("No cards to reveal\n");
        -: 1134:	  }
        -: 1135:	}
        -: 1136:      }
        -: 1137:	    
        -: 1138:      else{
    #####: 1139:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1140:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1141:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1142:	    state->deckCount[nextPlayer]++;
    #####: 1143:	    state->discard[nextPlayer][i] = -1;
    #####: 1144:	    state->discardCount[nextPlayer]--;
        -: 1145:	  }
        -: 1146:			    
    #####: 1147:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1148:	} 
    #####: 1149:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1150:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1151:	state->deckCount[nextPlayer]--;
    #####: 1152:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1153:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1154:	state->deckCount[nextPlayer]--;
        -: 1155:      }    
        -: 1156:		       
    #####: 1157:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1158:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1159:	state->playedCardCount++;
    #####: 1160:	tributeRevealedCards[1] = -1;
        -: 1161:      }
        -: 1162:
    #####: 1163:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1164:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1165:	  state->coins += 2;
        -: 1166:	}
        -: 1167:		    
    #####: 1168:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1169:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1170:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1171:	}
        -: 1172:	else{//Action Card
    #####: 1173:	  state->numActions = state->numActions + 2;
        -: 1174:	}
        -: 1175:      }
        -: 1176:	    
    #####: 1177:      return 0;
        -: 1178:		
        -: 1179:    case ambassador:
    #####: 1180:      j = 0;		//used to check if player has enough cards to discard
        -: 1181:
    #####: 1182:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1183:	{
    #####: 1184:	  return -1;				
        -: 1185:	}
        -: 1186:
    #####: 1187:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1188:	{
    #####: 1189:	  return -1;
        -: 1190:	}
        -: 1191:
    #####: 1192:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1193:	{
    #####: 1194:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1195:	    {
    #####: 1196:	      j++;
        -: 1197:	    }
        -: 1198:	}
    #####: 1199:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1200:	{
    #####: 1201:	  return -1;				
        -: 1202:	}
        -: 1203:
        -: 1204:      if (DEBUG) 
        -: 1205:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1206:
        -: 1207:      //increase supply count for choosen card by amount being discarded
    #####: 1208:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1209:			
        -: 1210:      //each other player gains a copy of revealed card
    #####: 1211:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1212:	{
    #####: 1213:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1214:	    {
    #####: 1215:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1216:	    }
        -: 1217:	}
        -: 1218:
        -: 1219:      //discard played card from hand
    #####: 1220:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1221:
        -: 1222:      //trash copies of cards returned to supply
    #####: 1223:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1224:	{
    #####: 1225:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1226:	    {
    #####: 1227:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1228:		{
    #####: 1229:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1230:		  break;
        -: 1231:		}
        -: 1232:	    }
        -: 1233:	}			
        -: 1234:
    #####: 1235:      return 0;
        -: 1236:		
        -: 1237:    case cutpurse:
        -: 1238:
    #####: 1239:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1240:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1241:	{
    #####: 1242:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1243:	    {
    #####: 1244:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1245:		{
    #####: 1246:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1247:		    {
    #####: 1248:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1249:		      break;
        -: 1250:		    }
    #####: 1251:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1252:		    {
    #####: 1253:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1254:			{
        -: 1255:			  if (DEBUG)
        -: 1256:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1257:			}	
    #####: 1258:		      break;
        -: 1259:		    }		
        -: 1260:		}
        -: 1261:					
        -: 1262:	    }
        -: 1263:				
        -: 1264:	}				
        -: 1265:
        -: 1266:      //discard played card from hand
    #####: 1267:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1268:
    #####: 1269:      return 0;
        -: 1270:
        -: 1271:		
        -: 1272:    case embargo:
        -: 1273:/*
        -: 1274:      //+2 Coins
        -: 1275:      state->coins = state->coins + 2;
        -: 1276:			
        -: 1277:      //see if selected pile is in play
        -: 1278:      if ( state->supplyCount[choice1] == -1 )
        -: 1279:	{
        -: 1280:	  return -1;
        -: 1281:	}
        -: 1282: 
        -: 1283:      //add embargo token to selected supply pile
        -: 1284:      state->embargoTokens[choice1]++;
        -: 1285:			
        -: 1286:      //trash card
        -: 1287:      discardCard(handPos, currentPlayer, state, 1);		
        -: 1288:      return 0;
        -: 1289: */
    #####: 1290:		return embargoCard(currentPlayer, handPos, state, choice1);
call    0 never executed
        -: 1291:			
        -: 1292:    case outpost:
        -: 1293:      //set outpost flag
    #####: 1294:      state->outpostPlayed++;
        -: 1295:			
        -: 1296:      //discard card
    #####: 1297:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1298:      return 0;
        -: 1299:		
        -: 1300:    case salvager:
        -: 1301:      //+1 buy
    #####: 1302:      state->numBuys++;
        -: 1303:			
    #####: 1304:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1305:	{
        -: 1306:	  //gain coins equal to trashed card
    #####: 1307:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1308:	  //trash card
    #####: 1309:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1310:	}
        -: 1311:			
        -: 1312:      //discard card
    #####: 1313:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1314:      return 0;
        -: 1315:		
        -: 1316:    case sea_hag:
        -: 1317:
    #####: 1318:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1319:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1320:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1321:	  state->discardCount[i]++;
    #####: 1322:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1323:	}
        -: 1324:      }
    #####: 1325:      return 0;
        -: 1326:
        -: 1327:		//return sea_hagCard(currentPlayer, state);
        -: 1328:			
        -: 1329:    case treasure_map:
        -: 1330:      //search hand for another treasure_map
    #####: 1331:      index = -1;
    #####: 1332:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1333:	{
    #####: 1334:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1335:	    {
    #####: 1336:	      index = i;
    #####: 1337:	      break;
        -: 1338:	    }
        -: 1339:	}
    #####: 1340:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1341:	{
        -: 1342:	  //trash both treasure cards
    #####: 1343:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1344:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1345:
        -: 1346:	  //gain 4 Gold cards
    #####: 1347:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1348:	    {
    #####: 1349:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1350:	    }
        -: 1351:				
        -: 1352:	  //return success
    #####: 1353:	  return 1;
        -: 1354:	}
        -: 1355:			
        -: 1356:      //no second treasure_map found in hand
    #####: 1357:      return -1;
        -: 1358:    }
        -: 1359:	
    #####: 1360:  return -1;
        -: 1361:}
        -: 1362:
function discardCard called 3 returned 100% blocks executed 78%
        3: 1363:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1364:{
        -: 1365:	
        -: 1366:  //if card is not trashed, added to Played pile 
        3: 1367:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1368:    {
        -: 1369:      //add card to played pile
        3: 1370:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        3: 1371:      state->playedCardCount++;
        -: 1372:    }
        -: 1373:	
        -: 1374:  //set played card to -1
        3: 1375:  state->hand[currentPlayer][handPos] = -1;
        -: 1376:	
        -: 1377:  //remove card from player's hand
        3: 1378:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1379:    {
        -: 1380:      //reduce number of cards in hand
    #####: 1381:      state->handCount[currentPlayer]--;
        -: 1382:    }
        3: 1383:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1384:    {
        -: 1385:      //reduce number of cards in hand
    #####: 1386:      state->handCount[currentPlayer]--;
        -: 1387:    }
        -: 1388:  else 	
        -: 1389:    {
        -: 1390:      //replace discarded card with last card in hand
        3: 1391:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1392:      //set last card to -1
        3: 1393:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1394:      //reduce number of cards in hand
        3: 1395:      state->handCount[currentPlayer]--;
        -: 1396:    }
        -: 1397:	
        3: 1398:  return 0;
        -: 1399:}
        -: 1400:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1401:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1402:{
        -: 1403:  //Note: supplyPos is enum of choosen card
        -: 1404:	
        -: 1405:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1406:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1407:    {
    #####: 1408:      return -1;
        -: 1409:    }
        -: 1410:	
        -: 1411:  //added card for [whoseTurn] current player:
        -: 1412:  // toFlag = 0 : add to discard
        -: 1413:  // toFlag = 1 : add to deck
        -: 1414:  // toFlag = 2 : add to hand
        -: 1415:
    #####: 1416:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1417:    {
    #####: 1418:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1419:      state->deckCount[player]++;
        -: 1420:    }
    #####: 1421:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1422:    {
    #####: 1423:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1424:      state->handCount[player]++;
        -: 1425:    }
        -: 1426:  else
        -: 1427:    {
    #####: 1428:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1429:      state->discardCount[player]++;
        -: 1430:    }
        -: 1431:	
        -: 1432:  //decrease number in supply pile
    #####: 1433:  state->supplyCount[supplyPos]--;
        -: 1434:	 
    #####: 1435:  return 0;
        -: 1436:}
        -: 1437:
function updateCoins called 7 returned 100% blocks executed 82%
        7: 1438:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1439:{
        -: 1440:  int i;
        -: 1441:	
        -: 1442:  //reset coin count
        7: 1443:  state->coins = 0;
        -: 1444:
        -: 1445:  //add coins for each Treasure card in player's hand
       42: 1446:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1447:    {
       35: 1448:      if (state->hand[player][i] == copper)
branch  0 taken 63% (fallthrough)
branch  1 taken 37%
        -: 1449:	{
       22: 1450:	  state->coins += 1;
        -: 1451:	}
       13: 1452:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1453:	{
    #####: 1454:	  state->coins += 2;
        -: 1455:	}
       13: 1456:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1457:	{
    #####: 1458:	  state->coins += 3;
        -: 1459:	}	
        -: 1460:    }	
        -: 1461:
        -: 1462:  //add bonus
        7: 1463:  state->coins += bonus;
        -: 1464:
        7: 1465:  return 0;
        -: 1466:}
        -: 1467:
        -: 1468:
        -: 1469://end of dominion.c
        -: 1470:
unittest3.c
***** Testing updateCoins() *****
Test player 0: 1 Treasure Cards, 0 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 1 Treasure Cards, 1 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 1 Treasure Cards, 2 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 1 Treasure Cards, 3 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 1 Treasure Cards, 4 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 1 Treasure Cards, 5 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 1 Treasure Cards, 6 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 1 Treasure Cards, 7 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 1 Treasure Cards, 8 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 1 Treasure Cards, 9 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 1 Treasure Cards, 10 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 2 Treasure Cards, 0 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 2 Treasure Cards, 1 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 2 Treasure Cards, 2 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 2 Treasure Cards, 3 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 2 Treasure Cards, 4 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 2 Treasure Cards, 5 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 2 Treasure Cards, 6 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 2 Treasure Cards, 7 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 2 Treasure Cards, 8 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 2 Treasure Cards, 9 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 2 Treasure Cards, 10 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 3 Treasure Cards, 0 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 3 Treasure Cards, 1 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 3 Treasure Cards, 2 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 3 Treasure Cards, 3 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 3 Treasure Cards, 4 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 3 Treasure Cards, 5 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 3 Treasure Cards, 6 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 3 Treasure Cards, 7 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 3 Treasure Cards, 8 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 3 Treasure Cards, 9 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 3 Treasure Cards, 10 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 4 Treasure Cards, 0 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 4 Treasure Cards, 1 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 4 Treasure Cards, 2 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 4 Treasure Cards, 3 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 4 Treasure Cards, 4 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 4 Treasure Cards, 5 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 4 Treasure Cards, 6 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 4 Treasure Cards, 7 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 4 Treasure Cards, 8 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 4 Treasure Cards, 9 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 4 Treasure Cards, 10 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 5 Treasure Cards, 0 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 5 Treasure Cards, 1 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 5 Treasure Cards, 2 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 5 Treasure Cards, 3 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 5 Treasure Cards, 4 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 5 Treasure Cards, 5 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 5 Treasure Cards, 6 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 5 Treasure Cards, 7 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 5 Treasure Cards, 8 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 5 Treasure Cards, 9 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 0: 5 Treasure Cards, 10 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 1 Treasure Cards, 0 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 1 Treasure Cards, 1 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 1 Treasure Cards, 2 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 1 Treasure Cards, 3 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 1 Treasure Cards, 4 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 1 Treasure Cards, 5 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 1 Treasure Cards, 6 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 1 Treasure Cards, 7 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 1 Treasure Cards, 8 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 1 Treasure Cards, 9 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 1 Treasure Cards, 10 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 2 Treasure Cards, 0 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 2 Treasure Cards, 1 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 2 Treasure Cards, 2 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 2 Treasure Cards, 3 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 2 Treasure Cards, 4 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 2 Treasure Cards, 5 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 2 Treasure Cards, 6 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 2 Treasure Cards, 7 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 2 Treasure Cards, 8 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 2 Treasure Cards, 9 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 2 Treasure Cards, 10 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 3 Treasure Cards, 0 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 3 Treasure Cards, 1 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 3 Treasure Cards, 2 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 3 Treasure Cards, 3 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 3 Treasure Cards, 4 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 3 Treasure Cards, 5 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 3 Treasure Cards, 6 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 3 Treasure Cards, 7 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 3 Treasure Cards, 8 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 3 Treasure Cards, 9 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 3 Treasure Cards, 10 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 4 Treasure Cards, 0 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 4 Treasure Cards, 1 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 4 Treasure Cards, 2 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 4 Treasure Cards, 3 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 4 Treasure Cards, 4 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 4 Treasure Cards, 5 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 4 Treasure Cards, 6 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 4 Treasure Cards, 7 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 4 Treasure Cards, 8 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 4 Treasure Cards, 9 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 4 Treasure Cards, 10 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 5 Treasure Cards, 0 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 5 Treasure Cards, 1 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 5 Treasure Cards, 2 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 5 Treasure Cards, 3 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 5 Treasure Cards, 4 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 5 Treasure Cards, 5 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 5 Treasure Cards, 6 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 5 Treasure Cards, 7 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 5 Treasure Cards, 8 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 5 Treasure Cards, 9 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
Test player 1: 5 Treasure Cards, 10 Bonus
Test PASSED
Test PASSED
Test PASSED
Test PASSED
***** updateCoins() Tests Complete *****

Processing file 1 out of 1
File 'dominion.c'
Lines executed:29.70% of 559
Branches executed:32.85% of 417
Taken at least once:22.54% of 417
Calls executed:21.05% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:7
        -:    0:Programs:7
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 3510 returned 100% blocks executed 83%
     3510:    8:int compare(const void* a, const void* b) {
     3510:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
     3510:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
      936:   12:    return -1;
     2574:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 117 returned 100% blocks executed 88%
      117:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      117:   44:  SelectStream(1);
call    0 returned 100%
      117:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
      117:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      117:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     1287:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
    12870:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
    11700:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      117:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
      117:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      117:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
      117:   89:      state->supplyCount[estate] = 8;
      117:   90:      state->supplyCount[duchy] = 8;
      117:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      117:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      117:  102:  state->supplyCount[silver] = 40;
      117:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     2457:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
    19305:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
    18135:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     1170:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:		{
      234:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      117:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     1053:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     1170:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    16965:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      351:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
      234:  140:      state->deckCount[i] = 0;
      936:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
      702:  143:	  state->deck[i][j] = estate;
      702:  144:	  state->deckCount[i]++;
        -:  145:	}
     1872:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
     1638:  148:	  state->deck[i][j] = copper;
     1638:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      351:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
      234:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      351:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      234:  166:      state->handCount[i] = 0;
      234:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     3276:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
     3159:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      117:  182:  state->outpostPlayed = 0;
      117:  183:  state->phase = 0;
      117:  184:  state->numActions = 1;
      117:  185:  state->numBuys = 1;
      117:  186:  state->playedCardCount = 0;
      117:  187:  state->whoseTurn = 0;
      117:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      702:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      585:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
      117:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
      117:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 234 returned 100% blocks executed 94%
      234:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      234:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      234:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
      234:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     2808:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     2340:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     2340:  216:    newDeck[newDeckPos] = state->deck[player][card];
     2340:  217:    newDeckPos++;
     8046:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
     5706:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     2340:  221:    state->deckCount[player]--;
        -:  222:  }
     2574:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     2340:  224:    state->deck[player][i] = newDeck[i];
     2340:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      234:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 6 returned 100% blocks executed 100%
        6:  346:int whoseTurn(struct gameState *state) {
        6:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 5 returned 100% blocks executed 91%
        5:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        5:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        3:  401:  j = 0;
       78:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
       75:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  405:	{
        3:  406:	  j++;
        -:  407:	}
        -:  408:    }
        3:  409:  if ( j >= 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
        3:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 18 returned 100% blocks executed 32%
       18:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
       18:  420:  int score = 0;
        -:  421:  //score from hand
       64:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
        -:  423:    {
       46:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       46:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 39% (fallthrough)
branch  1 taken 61%
       46:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       46:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       46:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       46:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
       18:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
       18:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
       18:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 593 returned 100% blocks executed 38%
      593:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      593:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      593:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      593:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      593:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      593:  576:    state->deckCount[player]--;
      593:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      593:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:/*************** REFACTORED CARDS ****************/
        -:  647:// BUG- drawntreasure = 1 instead of 0
function adventurerCard called 1 returned 100% blocks executed 67%
        1:  648:int adventurerCard(int currentPlayer, int temphand[], struct gameState *state) {
        -:  649:	//int drawntreasure=0;
        1:  650:	int drawntreasure=1;
        -:  651:	int cardDrawn;
        1:  652:	int z=0;
        -:  653:	
        3:  654:	while(drawntreasure<2){
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        1:  655:		if (state->deckCount[currentPlayer] < 1){ //if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  656:		shuffle(currentPlayer, state);
call    0 never executed
        -:  657:		}
        1:  658:		drawCard(currentPlayer, state);
call    0 returned 100%
        1:  659:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        1:  660:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        1:  661:			drawntreasure++;
        -:  662:		else{
    #####:  663:			temphand[z]=cardDrawn;
    #####:  664:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  665:			z++;
        -:  666:		}
        -:  667:	}
        2:  668:	while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  669:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  670:		z=z-1;
        -:  671:	}
        1:  672:	return 0;
        -:  673:}
        -:  674:
        -:  675:// BUG- only allows 2 cards to be drawn
function smithyCard called 1 returned 100% blocks executed 100%
        1:  676:int smithyCard(int currentPlayer, int handPos, struct gameState *state) {
        -:  677:	int i;
        -:  678:	//+3 Cards
        3:  679:	for (i = 0; i < 2; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  680:	//for (i = 0; i < 3; i++)
        -:  681:	{
        2:  682:		drawCard(currentPlayer, state);
call    0 returned 100%
        -:  683:	}
        -:  684:	
        -:  685:	//discard card from hand
        1:  686:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  687:	return 0;
        -:  688:}
        -:  689:
        -:  690:// BUG- allows only 1 action rather than 2
function villageCard called 1 returned 100% blocks executed 100%
        1:  691:int villageCard(int currentPlayer, int handPos, struct gameState *state) {
        -:  692:	//+1 Card
        1:  693:	drawCard(currentPlayer, state);
call    0 returned 100%
        -:  694:	
        -:  695:	//+2 Actions
        1:  696:	state->numActions = state->numActions + 1;
        -:  697:	//state->numActions = state->numActions + 2;
        -:  698:	
        -:  699:	//discard played card from hand
        1:  700:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  701:	return 0;
        -:  702:}
        -:  703:
        -:  704:// BUG- +3 cards insead of +4 cards
function council_roomCard called 1 returned 100% blocks executed 100%
        1:  705:int council_roomCard(int currentPlayer, int handPos, struct gameState *state) {
        -:  706:	//+4 Cards
        -:  707:	int i;
        4:  708:	for (i = 1; i < 4; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  709:	//for (i = 0; i < 4; i++)
        -:  710:	{
        3:  711:		drawCard(currentPlayer, state);
call    0 returned 100%
        -:  712:	}
        -:  713:
        -:  714:	//+1 Buy
        1:  715:	state->numBuys++;
        -:  716:
        -:  717:	//Each other player draws a card
        3:  718:	for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  719:	{
        2:  720:		if ( i != currentPlayer )
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  721:		{
        1:  722:			drawCard(i, state);
call    0 returned 100%
        -:  723:		}
        -:  724:	}
        -:  725:
        -:  726:	//put played card in played card pile
        1:  727:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  728:
        1:  729:	return 0;
        -:  730:}
        -:  731:
        -:  732:/*
        -:  733:int sea_hagCard(int currentPlayer, struct gameState *state) {
        -:  734:	for (int i = 0; i < state->numPlayers; i++) {
        -:  735:		if (i != currentPlayer){
        -:  736:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
        -:  737:			state->deckCount[i]--;
        -:  738:			state->discardCount[i]++;
        -:  739:			state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:  740:		}
        -:  741:	}
        -:  742:	return 0;
        -:  743:}
        -:  744:*/
        -:  745:
function embargoCard called 0 returned 0% blocks executed 0%
    #####:  746:int embargoCard(int currentPlayer, int handPos, struct gameState *state, int choice1) {
        -:  747:	//+2 Coins
    #####:  748:	state->coins = state->coins + 2;
        -:  749:	
        -:  750:	//see if selected pile is in play
    #####:  751:	if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -:  752:	{
    #####:  753:		return -1;
        -:  754:	}
        -:  755:	
        -:  756:	//add embargo token to selected supply pile
    #####:  757:	state->embargoTokens[choice1]++;
        -:  758:	
        -:  759:	//trash card
    #####:  760:	discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  761:	return 0;
        -:  762:}
        -:  763:/*********************************************************/
        -:  764:
function cardEffect called 4 returned 100% blocks executed 4%
        4:  765:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  766:{
        -:  767:  int i;
        -:  768:  int j;
        -:  769:  int k;
        -:  770:  int x;
        -:  771:  int index;
        4:  772:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        4:  773:  int nextPlayer = currentPlayer + 1;
        -:  774:
        4:  775:  int tributeRevealedCards[2] = {-1, -1};
        -:  776:  int temphand[MAX_HAND];// moved above the if statement
        -:  777:  //int drawntreasure=0;
        -:  778:  //int cardDrawn;
        4:  779:  int z = 0;// this is the counter for the temp hand
        4:  780:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  781:    nextPlayer = 0;
        -:  782:  }
        -:  783:  
        -:  784:	
        -:  785:  //uses switch to select card and perform actions
        4:  786:  switch( card ) 
branch  0 taken 25%
branch  1 taken 25%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 25%
branch  7 taken 25%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  787:    {
        -:  788:    case adventurer:
        -:  789:/*
        -:  790:      while(drawntreasure<2){
        -:  791:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  792:	  shuffle(currentPlayer, state);
        -:  793:	}
        -:  794:	drawCard(currentPlayer, state);
        -:  795:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  796:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  797:	  drawntreasure++;
        -:  798:	else{
        -:  799:	  temphand[z]=cardDrawn;
        -:  800:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  801:	  z++;
        -:  802:	}
        -:  803:      }
        -:  804:      while(z-1>=0){
        -:  805:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  806:	z=z-1;
        -:  807:      }
        -:  808:      return 0;
        -:  809:*/
        1:  810:			return adventurerCard(currentPlayer, temphand, state);
call    0 returned 100%
        -:  811:			
        -:  812:    case council_room:
        -:  813:/*
        -:  814:      //+4 Cards
        -:  815:      for (i = 0; i < 4; i++)
        -:  816:	{
        -:  817:	  drawCard(currentPlayer, state);
        -:  818:	}
        -:  819:			
        -:  820:      //+1 Buy
        -:  821:      state->numBuys++;
        -:  822:			
        -:  823:      //Each other player draws a card
        -:  824:      for (i = 0; i < state->numPlayers; i++)
        -:  825:	{
        -:  826:	  if ( i != currentPlayer )
        -:  827:	    {
        -:  828:	      drawCard(i, state);
        -:  829:	    }
        -:  830:	}
        -:  831:			
        -:  832:      //put played card in played card pile
        -:  833:      discardCard(handPos, currentPlayer, state, 0);
        -:  834:			
        -:  835:      return 0;
        -:  836:*/
        1:  837:		return council_roomCard(currentPlayer, handPos, state);
call    0 returned 100%
        -:  838:			
        -:  839:    case feast:
        -:  840:      //gain card with cost up to 5
        -:  841:      //Backup hand
    #####:  842:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  843:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  844:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  845:      }
        -:  846:      //Backup hand
        -:  847:
        -:  848:      //Update Coins for Buy
    #####:  849:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  850:      x = 1;//Condition to loop on
    #####:  851:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  852:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  853:	  if (DEBUG)
        -:  854:	    printf("None of that card left, sorry!\n");
        -:  855:
        -:  856:	  if (DEBUG){
        -:  857:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  858:	  }
        -:  859:	}
    #####:  860:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  861:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  862:
        -:  863:	  if (DEBUG){
        -:  864:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  865:	  }
        -:  866:	}
        -:  867:	else{
        -:  868:
        -:  869:	  if (DEBUG){
        -:  870:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  871:	  }
        -:  872:
    #####:  873:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  874:	  x = 0;//No more buying cards
        -:  875:
        -:  876:	  if (DEBUG){
        -:  877:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  878:	  }
        -:  879:
        -:  880:	}
        -:  881:      }     
        -:  882:
        -:  883:      //Reset Hand
    #####:  884:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  885:	state->hand[currentPlayer][i] = temphand[i];
    #####:  886:	temphand[i] = -1;
        -:  887:      }
        -:  888:      //Reset Hand
        -:  889:      			
    #####:  890:      return 0;
        -:  891:			
        -:  892:    case gardens:
    #####:  893:      return -1;
        -:  894:			
        -:  895:    case mine:
    #####:  896:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  897:
    #####:  898:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  899:	{
    #####:  900:	  return -1;
        -:  901:	}
        -:  902:		
    #####:  903:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  904:	{
    #####:  905:	  return -1;
        -:  906:	}
        -:  907:
    #####:  908:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  909:	{
    #####:  910:	  return -1;
        -:  911:	}
        -:  912:
    #####:  913:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  914:
        -:  915:      //discard card from hand
    #####:  916:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  917:
        -:  918:      //discard trashed card
    #####:  919:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  920:	{
    #####:  921:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  922:	    {
    #####:  923:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  924:	      break;
        -:  925:	    }
        -:  926:	}
        -:  927:			
    #####:  928:      return 0;
        -:  929:			
        -:  930:    case remodel:
    #####:  931:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  932:
    #####:  933:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  934:	{
    #####:  935:	  return -1;
        -:  936:	}
        -:  937:
    #####:  938:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  939:
        -:  940:      //discard card from hand
    #####:  941:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  942:
        -:  943:      //discard trashed card
    #####:  944:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  945:	{
    #####:  946:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  947:	    {
    #####:  948:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  949:	      break;
        -:  950:	    }
        -:  951:	}
        -:  952:
        -:  953:
    #####:  954:      return 0;
        -:  955:		
        -:  956:    case smithy:
        -:  957:/*
        -:  958:	  //+3 Cards
        -:  959:      for (i = 0; i < 3; i++)
        -:  960:	{
        -:  961:	  drawCard(currentPlayer, state);
        -:  962:	}
        -:  963:			
        -:  964:      //discard card from hand
        -:  965:      discardCard(handPos, currentPlayer, state, 0);
        -:  966:      return 0;
        -:  967: */
        1:  968:		return smithyCard(currentPlayer, handPos, state);
call    0 returned 100%
        -:  969:		
        -:  970:    case village:
        -:  971:/*
        -:  972:      //+1 Card
        -:  973:      drawCard(currentPlayer, state);
        -:  974:			
        -:  975:      //+2 Actions
        -:  976:      state->numActions = state->numActions + 2;
        -:  977:			
        -:  978:      //discard played card from hand
        -:  979:      discardCard(handPos, currentPlayer, state, 0);
        -:  980:      return 0;
        -:  981:*/
        1:  982:		return villageCard(currentPlayer, handPos, state);
call    0 returned 100%
        -:  983:			
        -:  984:    case baron:
    #####:  985:      state->numBuys++;//Increase buys by 1!
    #####:  986:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  987:	int p = 0;//Iterator for hand!
    #####:  988:	int card_not_discarded = 1;//Flag for discard set!
    #####:  989:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  990:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  991:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  992:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  993:	    state->discardCount[currentPlayer]++;
    #####:  994:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  995:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  996:	    }
    #####:  997:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  998:	    state->handCount[currentPlayer]--;
    #####:  999:	    card_not_discarded = 0;//Exit the loop
        -: 1000:	  }
    #####: 1001:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1002:	    if(DEBUG) {
        -: 1003:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1004:	      printf("Must gain an estate if there are any\n");
        -: 1005:	    }
    #####: 1006:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1007:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1008:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1009:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1010:		isGameOver(state);
call    0 never executed
        -: 1011:	      }
        -: 1012:	    }
    #####: 1013:	    card_not_discarded = 0;//Exit the loop
        -: 1014:	  }
        -: 1015:			    
        -: 1016:	  else{
    #####: 1017:	    p++;//Next card
        -: 1018:	  }
        -: 1019:	}
        -: 1020:      }
        -: 1021:			    
        -: 1022:      else{
    #####: 1023:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1024:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1025:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1026:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1027:	    isGameOver(state);
call    0 never executed
        -: 1028:	  }
        -: 1029:	}
        -: 1030:      }
        -: 1031:	    
        -: 1032:      
    #####: 1033:      return 0;
        -: 1034:		
        -: 1035:    case great_hall:
        -: 1036:      //+1 Card
    #####: 1037:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1038:			
        -: 1039:      //+1 Actions
    #####: 1040:      state->numActions++;
        -: 1041:			
        -: 1042:      //discard card from hand
    #####: 1043:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1044:      return 0;
        -: 1045:		
        -: 1046:    case minion:
        -: 1047:      //+1 action
    #####: 1048:      state->numActions++;
        -: 1049:			
        -: 1050:      //discard card from hand
    #####: 1051:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1052:			
    #####: 1053:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1054:	{
    #####: 1055:	  state->coins = state->coins + 2;
        -: 1056:	}
        -: 1057:			
    #####: 1058:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1059:	{
        -: 1060:	  //discard hand
    #####: 1061:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1062:	    {
    #####: 1063:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1064:	    }
        -: 1065:				
        -: 1066:	  //draw 4
    #####: 1067:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1068:	    {
    #####: 1069:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1070:	    }
        -: 1071:				
        -: 1072:	  //other players discard hand and redraw if hand size > 4
    #####: 1073:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1074:	    {
    #####: 1075:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1076:		{
    #####: 1077:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1078:		    {
        -: 1079:		      //discard hand
    #####: 1080:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1081:			{
    #####: 1082:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1083:			}
        -: 1084:							
        -: 1085:		      //draw 4
    #####: 1086:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1087:			{
    #####: 1088:			  drawCard(i, state);
call    0 never executed
        -: 1089:			}
        -: 1090:		    }
        -: 1091:		}
        -: 1092:	    }
        -: 1093:				
        -: 1094:	}
    #####: 1095:      return 0;
        -: 1096:		
        -: 1097:    case steward:
    #####: 1098:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1099:	{
        -: 1100:	  //+2 cards
    #####: 1101:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1102:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1103:	}
    #####: 1104:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1105:	{
        -: 1106:	  //+2 coins
    #####: 1107:	  state->coins = state->coins + 2;
        -: 1108:	}
        -: 1109:      else
        -: 1110:	{
        -: 1111:	  //trash 2 cards in hand
    #####: 1112:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1113:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1114:	}
        -: 1115:			
        -: 1116:      //discard card from hand
    #####: 1117:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1118:      return 0;
        -: 1119:		
        -: 1120:    case tribute:
    #####: 1121:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1122:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1123:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1124:	  state->deckCount[nextPlayer]--;
        -: 1125:	}
    #####: 1126:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1127:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1128:	  state->discardCount[nextPlayer]--;
        -: 1129:	}
        -: 1130:	else{
        -: 1131:	  //No Card to Reveal
        -: 1132:	  if (DEBUG){
        -: 1133:	    printf("No cards to reveal\n");
        -: 1134:	  }
        -: 1135:	}
        -: 1136:      }
        -: 1137:	    
        -: 1138:      else{
    #####: 1139:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1140:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1141:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1142:	    state->deckCount[nextPlayer]++;
    #####: 1143:	    state->discard[nextPlayer][i] = -1;
    #####: 1144:	    state->discardCount[nextPlayer]--;
        -: 1145:	  }
        -: 1146:			    
    #####: 1147:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1148:	} 
    #####: 1149:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1150:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1151:	state->deckCount[nextPlayer]--;
    #####: 1152:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1153:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1154:	state->deckCount[nextPlayer]--;
        -: 1155:      }    
        -: 1156:		       
    #####: 1157:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1158:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1159:	state->playedCardCount++;
    #####: 1160:	tributeRevealedCards[1] = -1;
        -: 1161:      }
        -: 1162:
    #####: 1163:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1164:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1165:	  state->coins += 2;
        -: 1166:	}
        -: 1167:		    
    #####: 1168:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1169:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1170:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1171:	}
        -: 1172:	else{//Action Card
    #####: 1173:	  state->numActions = state->numActions + 2;
        -: 1174:	}
        -: 1175:      }
        -: 1176:	    
    #####: 1177:      return 0;
        -: 1178:		
        -: 1179:    case ambassador:
    #####: 1180:      j = 0;		//used to check if player has enough cards to discard
        -: 1181:
    #####: 1182:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1183:	{
    #####: 1184:	  return -1;				
        -: 1185:	}
        -: 1186:
    #####: 1187:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1188:	{
    #####: 1189:	  return -1;
        -: 1190:	}
        -: 1191:
    #####: 1192:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1193:	{
    #####: 1194:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1195:	    {
    #####: 1196:	      j++;
        -: 1197:	    }
        -: 1198:	}
    #####: 1199:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1200:	{
    #####: 1201:	  return -1;				
        -: 1202:	}
        -: 1203:
        -: 1204:      if (DEBUG) 
        -: 1205:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1206:
        -: 1207:      //increase supply count for choosen card by amount being discarded
    #####: 1208:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1209:			
        -: 1210:      //each other player gains a copy of revealed card
    #####: 1211:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1212:	{
    #####: 1213:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1214:	    {
    #####: 1215:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1216:	    }
        -: 1217:	}
        -: 1218:
        -: 1219:      //discard played card from hand
    #####: 1220:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1221:
        -: 1222:      //trash copies of cards returned to supply
    #####: 1223:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1224:	{
    #####: 1225:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1226:	    {
    #####: 1227:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1228:		{
    #####: 1229:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1230:		  break;
        -: 1231:		}
        -: 1232:	    }
        -: 1233:	}			
        -: 1234:
    #####: 1235:      return 0;
        -: 1236:		
        -: 1237:    case cutpurse:
        -: 1238:
    #####: 1239:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1240:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1241:	{
    #####: 1242:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1243:	    {
    #####: 1244:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1245:		{
    #####: 1246:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1247:		    {
    #####: 1248:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1249:		      break;
        -: 1250:		    }
    #####: 1251:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1252:		    {
    #####: 1253:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1254:			{
        -: 1255:			  if (DEBUG)
        -: 1256:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1257:			}	
    #####: 1258:		      break;
        -: 1259:		    }		
        -: 1260:		}
        -: 1261:					
        -: 1262:	    }
        -: 1263:				
        -: 1264:	}				
        -: 1265:
        -: 1266:      //discard played card from hand
    #####: 1267:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1268:
    #####: 1269:      return 0;
        -: 1270:
        -: 1271:		
        -: 1272:    case embargo:
        -: 1273:/*
        -: 1274:      //+2 Coins
        -: 1275:      state->coins = state->coins + 2;
        -: 1276:			
        -: 1277:      //see if selected pile is in play
        -: 1278:      if ( state->supplyCount[choice1] == -1 )
        -: 1279:	{
        -: 1280:	  return -1;
        -: 1281:	}
        -: 1282: 
        -: 1283:      //add embargo token to selected supply pile
        -: 1284:      state->embargoTokens[choice1]++;
        -: 1285:			
        -: 1286:      //trash card
        -: 1287:      discardCard(handPos, currentPlayer, state, 1);		
        -: 1288:      return 0;
        -: 1289: */
    #####: 1290:		return embargoCard(currentPlayer, handPos, state, choice1);
call    0 never executed
        -: 1291:			
        -: 1292:    case outpost:
        -: 1293:      //set outpost flag
    #####: 1294:      state->outpostPlayed++;
        -: 1295:			
        -: 1296:      //discard card
    #####: 1297:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1298:      return 0;
        -: 1299:		
        -: 1300:    case salvager:
        -: 1301:      //+1 buy
    #####: 1302:      state->numBuys++;
        -: 1303:			
    #####: 1304:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1305:	{
        -: 1306:	  //gain coins equal to trashed card
    #####: 1307:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1308:	  //trash card
    #####: 1309:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1310:	}
        -: 1311:			
        -: 1312:      //discard card
    #####: 1313:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1314:      return 0;
        -: 1315:		
        -: 1316:    case sea_hag:
        -: 1317:
    #####: 1318:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1319:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1320:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1321:	  state->discardCount[i]++;
    #####: 1322:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1323:	}
        -: 1324:      }
    #####: 1325:      return 0;
        -: 1326:
        -: 1327:		//return sea_hagCard(currentPlayer, state);
        -: 1328:			
        -: 1329:    case treasure_map:
        -: 1330:      //search hand for another treasure_map
    #####: 1331:      index = -1;
    #####: 1332:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1333:	{
    #####: 1334:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1335:	    {
    #####: 1336:	      index = i;
    #####: 1337:	      break;
        -: 1338:	    }
        -: 1339:	}
    #####: 1340:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1341:	{
        -: 1342:	  //trash both treasure cards
    #####: 1343:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1344:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1345:
        -: 1346:	  //gain 4 Gold cards
    #####: 1347:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1348:	    {
    #####: 1349:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1350:	    }
        -: 1351:				
        -: 1352:	  //return success
    #####: 1353:	  return 1;
        -: 1354:	}
        -: 1355:			
        -: 1356:      //no second treasure_map found in hand
    #####: 1357:      return -1;
        -: 1358:    }
        -: 1359:	
    #####: 1360:  return -1;
        -: 1361:}
        -: 1362:
function discardCard called 3 returned 100% blocks executed 78%
        3: 1363:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1364:{
        -: 1365:	
        -: 1366:  //if card is not trashed, added to Played pile 
        3: 1367:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1368:    {
        -: 1369:      //add card to played pile
        3: 1370:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        3: 1371:      state->playedCardCount++;
        -: 1372:    }
        -: 1373:	
        -: 1374:  //set played card to -1
        3: 1375:  state->hand[currentPlayer][handPos] = -1;
        -: 1376:	
        -: 1377:  //remove card from player's hand
        3: 1378:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1379:    {
        -: 1380:      //reduce number of cards in hand
    #####: 1381:      state->handCount[currentPlayer]--;
        -: 1382:    }
        3: 1383:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1384:    {
        -: 1385:      //reduce number of cards in hand
    #####: 1386:      state->handCount[currentPlayer]--;
        -: 1387:    }
        -: 1388:  else 	
        -: 1389:    {
        -: 1390:      //replace discarded card with last card in hand
        3: 1391:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1392:      //set last card to -1
        3: 1393:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1394:      //reduce number of cards in hand
        3: 1395:      state->handCount[currentPlayer]--;
        -: 1396:    }
        -: 1397:	
        3: 1398:  return 0;
        -: 1399:}
        -: 1400:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1401:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1402:{
        -: 1403:  //Note: supplyPos is enum of choosen card
        -: 1404:	
        -: 1405:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1406:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1407:    {
    #####: 1408:      return -1;
        -: 1409:    }
        -: 1410:	
        -: 1411:  //added card for [whoseTurn] current player:
        -: 1412:  // toFlag = 0 : add to discard
        -: 1413:  // toFlag = 1 : add to deck
        -: 1414:  // toFlag = 2 : add to hand
        -: 1415:
    #####: 1416:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1417:    {
    #####: 1418:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1419:      state->deckCount[player]++;
        -: 1420:    }
    #####: 1421:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1422:    {
    #####: 1423:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1424:      state->handCount[player]++;
        -: 1425:    }
        -: 1426:  else
        -: 1427:    {
    #####: 1428:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1429:      state->discardCount[player]++;
        -: 1430:    }
        -: 1431:	
        -: 1432:  //decrease number in supply pile
    #####: 1433:  state->supplyCount[supplyPos]--;
        -: 1434:	 
    #####: 1435:  return 0;
        -: 1436:}
        -: 1437:
function updateCoins called 557 returned 100% blocks executed 100%
      557: 1438:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1439:{
        -: 1440:  int i;
        -: 1441:	
        -: 1442:  //reset coin count
      557: 1443:  state->coins = 0;
        -: 1444:
        -: 1445:  //add coins for each Treasure card in player's hand
     2022: 1446:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
        -: 1447:    {
     1465: 1448:      if (state->hand[player][i] == copper)
branch  0 taken 47% (fallthrough)
branch  1 taken 53%
        -: 1449:	{
      682: 1450:	  state->coins += 1;
        -: 1451:	}
      783: 1452:      else if (state->hand[player][i] == silver)
branch  0 taken 28% (fallthrough)
branch  1 taken 72%
        -: 1453:	{
      220: 1454:	  state->coins += 2;
        -: 1455:	}
      563: 1456:      else if (state->hand[player][i] == gold)
branch  0 taken 39% (fallthrough)
branch  1 taken 61%
        -: 1457:	{
      220: 1458:	  state->coins += 3;
        -: 1459:	}	
        -: 1460:    }	
        -: 1461:
        -: 1462:  //add bonus
      557: 1463:  state->coins += bonus;
        -: 1464:
      557: 1465:  return 0;
        -: 1466:}
        -: 1467:
        -: 1468:
        -: 1469://end of dominion.c
        -: 1470:
unittest4.c
***** Testing supplyCount() *****
testing default supply counts...
Test supplyCount[0]
Test PASSED
Test supplyCount[1]
Test PASSED
Test supplyCount[2]
Test PASSED
Test supplyCount[3]
Test PASSED
Test supplyCount[4]
Test PASSED
Test supplyCount[5]
Test PASSED
Test supplyCount[6]
Test PASSED
Test supplyCount[7]
Test PASSED
Test supplyCount[8]
Test PASSED
Test supplyCount[9]
Test PASSED
Test supplyCount[10]
Test PASSED
Test supplyCount[11]
Test PASSED
Test supplyCount[12]
Test PASSED
Test supplyCount[13]
Test PASSED
Test supplyCount[14]
Test PASSED
Test supplyCount[15]
Test PASSED
Test supplyCount[16]
Test PASSED
Test supplyCount[17]
Test PASSED
Test supplyCount[18]
Test PASSED
Test supplyCount[19]
Test PASSED
Test supplyCount[20]
Test PASSED
Test supplyCount[21]
Test PASSED
Test supplyCount[22]
Test PASSED
Test supplyCount[23]
Test PASSED
Test supplyCount[24]
Test PASSED
Test supplyCount[25]
Test PASSED
Test supplyCount[26]
Test PASSED
testing supply counts = 0...
Test supplyCount[0]
Test PASSED
Test supplyCount[1]
Test PASSED
Test supplyCount[2]
Test PASSED
Test supplyCount[3]
Test PASSED
Test supplyCount[4]
Test PASSED
Test supplyCount[5]
Test PASSED
Test supplyCount[6]
Test PASSED
Test supplyCount[7]
Test PASSED
Test supplyCount[8]
Test PASSED
Test supplyCount[9]
Test PASSED
Test supplyCount[10]
Test PASSED
Test supplyCount[11]
Test PASSED
Test supplyCount[12]
Test PASSED
Test supplyCount[13]
Test PASSED
Test supplyCount[14]
Test PASSED
Test supplyCount[15]
Test PASSED
Test supplyCount[16]
Test PASSED
Test supplyCount[17]
Test PASSED
Test supplyCount[18]
Test PASSED
Test supplyCount[19]
Test PASSED
Test supplyCount[20]
Test PASSED
Test supplyCount[21]
Test PASSED
Test supplyCount[22]
Test PASSED
Test supplyCount[23]
Test PASSED
Test supplyCount[24]
Test PASSED
Test supplyCount[25]
Test PASSED
Test supplyCount[26]
Test PASSED
***** supplyCount() Tests Complete *****

Processing file 1 out of 1
File 'dominion.c'
Lines executed:30.05% of 559
Branches executed:32.85% of 417
Taken at least once:22.54% of 417
Calls executed:21.05% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 4320 returned 100% blocks executed 83%
     4320:    8:int compare(const void* a, const void* b) {
     4320:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
     4320:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
     1152:   12:    return -1;
     3168:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 144 returned 100% blocks executed 88%
      144:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      144:   44:  SelectStream(1);
call    0 returned 100%
      144:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
      144:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      144:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     1584:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
    15840:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
    14400:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      144:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
      144:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      144:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
      144:   89:      state->supplyCount[estate] = 8;
      144:   90:      state->supplyCount[duchy] = 8;
      144:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      144:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      144:  102:  state->supplyCount[silver] = 40;
      144:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     3024:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
    23760:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
    22320:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     1440:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:		{
      288:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      144:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     1296:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     1440:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    20880:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      432:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
      288:  140:      state->deckCount[i] = 0;
     1152:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
      864:  143:	  state->deck[i][j] = estate;
      864:  144:	  state->deckCount[i]++;
        -:  145:	}
     2304:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
     2016:  148:	  state->deck[i][j] = copper;
     2016:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      432:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
      288:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      432:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      288:  166:      state->handCount[i] = 0;
      288:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     4032:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
     3888:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      144:  182:  state->outpostPlayed = 0;
      144:  183:  state->phase = 0;
      144:  184:  state->numActions = 1;
      144:  185:  state->numBuys = 1;
      144:  186:  state->playedCardCount = 0;
      144:  187:  state->whoseTurn = 0;
      144:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      864:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      720:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
      144:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
      144:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 288 returned 100% blocks executed 94%
      288:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      288:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      288:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
      288:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     3456:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     2880:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     2880:  216:    newDeck[newDeckPos] = state->deck[player][card];
     2880:  217:    newDeckPos++;
    10017:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
     7137:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     2880:  221:    state->deckCount[player]--;
        -:  222:  }
     3168:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     2880:  224:    state->deck[player][i] = newDeck[i];
     2880:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      288:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 54 returned 100% blocks executed 100%
       54:  320:int supplyCount(int card, struct gameState *state) {
       54:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 6 returned 100% blocks executed 100%
        6:  346:int whoseTurn(struct gameState *state) {
        6:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 5 returned 100% blocks executed 91%
        5:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        5:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        3:  401:  j = 0;
       78:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
       75:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  405:	{
        3:  406:	  j++;
        -:  407:	}
        -:  408:    }
        3:  409:  if ( j >= 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
        3:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 18 returned 100% blocks executed 32%
       18:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
       18:  420:  int score = 0;
        -:  421:  //score from hand
       64:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
        -:  423:    {
       46:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       46:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 39% (fallthrough)
branch  1 taken 61%
       46:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       46:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       46:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       46:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
       18:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
       18:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
       18:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 728 returned 100% blocks executed 38%
      728:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      728:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      728:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      728:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      728:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      728:  576:    state->deckCount[player]--;
      728:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      728:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:/*************** REFACTORED CARDS ****************/
        -:  647:// BUG- drawntreasure = 1 instead of 0
function adventurerCard called 1 returned 100% blocks executed 67%
        1:  648:int adventurerCard(int currentPlayer, int temphand[], struct gameState *state) {
        -:  649:	//int drawntreasure=0;
        1:  650:	int drawntreasure=1;
        -:  651:	int cardDrawn;
        1:  652:	int z=0;
        -:  653:	
        3:  654:	while(drawntreasure<2){
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        1:  655:		if (state->deckCount[currentPlayer] < 1){ //if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  656:		shuffle(currentPlayer, state);
call    0 never executed
        -:  657:		}
        1:  658:		drawCard(currentPlayer, state);
call    0 returned 100%
        1:  659:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        1:  660:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        1:  661:			drawntreasure++;
        -:  662:		else{
    #####:  663:			temphand[z]=cardDrawn;
    #####:  664:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  665:			z++;
        -:  666:		}
        -:  667:	}
        2:  668:	while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  669:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  670:		z=z-1;
        -:  671:	}
        1:  672:	return 0;
        -:  673:}
        -:  674:
        -:  675:// BUG- only allows 2 cards to be drawn
function smithyCard called 1 returned 100% blocks executed 100%
        1:  676:int smithyCard(int currentPlayer, int handPos, struct gameState *state) {
        -:  677:	int i;
        -:  678:	//+3 Cards
        3:  679:	for (i = 0; i < 2; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  680:	//for (i = 0; i < 3; i++)
        -:  681:	{
        2:  682:		drawCard(currentPlayer, state);
call    0 returned 100%
        -:  683:	}
        -:  684:	
        -:  685:	//discard card from hand
        1:  686:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  687:	return 0;
        -:  688:}
        -:  689:
        -:  690:// BUG- allows only 1 action rather than 2
function villageCard called 1 returned 100% blocks executed 100%
        1:  691:int villageCard(int currentPlayer, int handPos, struct gameState *state) {
        -:  692:	//+1 Card
        1:  693:	drawCard(currentPlayer, state);
call    0 returned 100%
        -:  694:	
        -:  695:	//+2 Actions
        1:  696:	state->numActions = state->numActions + 1;
        -:  697:	//state->numActions = state->numActions + 2;
        -:  698:	
        -:  699:	//discard played card from hand
        1:  700:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  701:	return 0;
        -:  702:}
        -:  703:
        -:  704:// BUG- +3 cards insead of +4 cards
function council_roomCard called 1 returned 100% blocks executed 100%
        1:  705:int council_roomCard(int currentPlayer, int handPos, struct gameState *state) {
        -:  706:	//+4 Cards
        -:  707:	int i;
        4:  708:	for (i = 1; i < 4; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  709:	//for (i = 0; i < 4; i++)
        -:  710:	{
        3:  711:		drawCard(currentPlayer, state);
call    0 returned 100%
        -:  712:	}
        -:  713:
        -:  714:	//+1 Buy
        1:  715:	state->numBuys++;
        -:  716:
        -:  717:	//Each other player draws a card
        3:  718:	for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  719:	{
        2:  720:		if ( i != currentPlayer )
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  721:		{
        1:  722:			drawCard(i, state);
call    0 returned 100%
        -:  723:		}
        -:  724:	}
        -:  725:
        -:  726:	//put played card in played card pile
        1:  727:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  728:
        1:  729:	return 0;
        -:  730:}
        -:  731:
        -:  732:/*
        -:  733:int sea_hagCard(int currentPlayer, struct gameState *state) {
        -:  734:	for (int i = 0; i < state->numPlayers; i++) {
        -:  735:		if (i != currentPlayer){
        -:  736:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
        -:  737:			state->deckCount[i]--;
        -:  738:			state->discardCount[i]++;
        -:  739:			state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:  740:		}
        -:  741:	}
        -:  742:	return 0;
        -:  743:}
        -:  744:*/
        -:  745:
function embargoCard called 0 returned 0% blocks executed 0%
    #####:  746:int embargoCard(int currentPlayer, int handPos, struct gameState *state, int choice1) {
        -:  747:	//+2 Coins
    #####:  748:	state->coins = state->coins + 2;
        -:  749:	
        -:  750:	//see if selected pile is in play
    #####:  751:	if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -:  752:	{
    #####:  753:		return -1;
        -:  754:	}
        -:  755:	
        -:  756:	//add embargo token to selected supply pile
    #####:  757:	state->embargoTokens[choice1]++;
        -:  758:	
        -:  759:	//trash card
    #####:  760:	discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  761:	return 0;
        -:  762:}
        -:  763:/*********************************************************/
        -:  764:
function cardEffect called 4 returned 100% blocks executed 4%
        4:  765:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  766:{
        -:  767:  int i;
        -:  768:  int j;
        -:  769:  int k;
        -:  770:  int x;
        -:  771:  int index;
        4:  772:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        4:  773:  int nextPlayer = currentPlayer + 1;
        -:  774:
        4:  775:  int tributeRevealedCards[2] = {-1, -1};
        -:  776:  int temphand[MAX_HAND];// moved above the if statement
        -:  777:  //int drawntreasure=0;
        -:  778:  //int cardDrawn;
        4:  779:  int z = 0;// this is the counter for the temp hand
        4:  780:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  781:    nextPlayer = 0;
        -:  782:  }
        -:  783:  
        -:  784:	
        -:  785:  //uses switch to select card and perform actions
        4:  786:  switch( card ) 
branch  0 taken 25%
branch  1 taken 25%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 25%
branch  7 taken 25%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  787:    {
        -:  788:    case adventurer:
        -:  789:/*
        -:  790:      while(drawntreasure<2){
        -:  791:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  792:	  shuffle(currentPlayer, state);
        -:  793:	}
        -:  794:	drawCard(currentPlayer, state);
        -:  795:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  796:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  797:	  drawntreasure++;
        -:  798:	else{
        -:  799:	  temphand[z]=cardDrawn;
        -:  800:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  801:	  z++;
        -:  802:	}
        -:  803:      }
        -:  804:      while(z-1>=0){
        -:  805:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  806:	z=z-1;
        -:  807:      }
        -:  808:      return 0;
        -:  809:*/
        1:  810:			return adventurerCard(currentPlayer, temphand, state);
call    0 returned 100%
        -:  811:			
        -:  812:    case council_room:
        -:  813:/*
        -:  814:      //+4 Cards
        -:  815:      for (i = 0; i < 4; i++)
        -:  816:	{
        -:  817:	  drawCard(currentPlayer, state);
        -:  818:	}
        -:  819:			
        -:  820:      //+1 Buy
        -:  821:      state->numBuys++;
        -:  822:			
        -:  823:      //Each other player draws a card
        -:  824:      for (i = 0; i < state->numPlayers; i++)
        -:  825:	{
        -:  826:	  if ( i != currentPlayer )
        -:  827:	    {
        -:  828:	      drawCard(i, state);
        -:  829:	    }
        -:  830:	}
        -:  831:			
        -:  832:      //put played card in played card pile
        -:  833:      discardCard(handPos, currentPlayer, state, 0);
        -:  834:			
        -:  835:      return 0;
        -:  836:*/
        1:  837:		return council_roomCard(currentPlayer, handPos, state);
call    0 returned 100%
        -:  838:			
        -:  839:    case feast:
        -:  840:      //gain card with cost up to 5
        -:  841:      //Backup hand
    #####:  842:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  843:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  844:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  845:      }
        -:  846:      //Backup hand
        -:  847:
        -:  848:      //Update Coins for Buy
    #####:  849:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  850:      x = 1;//Condition to loop on
    #####:  851:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  852:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  853:	  if (DEBUG)
        -:  854:	    printf("None of that card left, sorry!\n");
        -:  855:
        -:  856:	  if (DEBUG){
        -:  857:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  858:	  }
        -:  859:	}
    #####:  860:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  861:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  862:
        -:  863:	  if (DEBUG){
        -:  864:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  865:	  }
        -:  866:	}
        -:  867:	else{
        -:  868:
        -:  869:	  if (DEBUG){
        -:  870:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  871:	  }
        -:  872:
    #####:  873:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  874:	  x = 0;//No more buying cards
        -:  875:
        -:  876:	  if (DEBUG){
        -:  877:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  878:	  }
        -:  879:
        -:  880:	}
        -:  881:      }     
        -:  882:
        -:  883:      //Reset Hand
    #####:  884:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  885:	state->hand[currentPlayer][i] = temphand[i];
    #####:  886:	temphand[i] = -1;
        -:  887:      }
        -:  888:      //Reset Hand
        -:  889:      			
    #####:  890:      return 0;
        -:  891:			
        -:  892:    case gardens:
    #####:  893:      return -1;
        -:  894:			
        -:  895:    case mine:
    #####:  896:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  897:
    #####:  898:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  899:	{
    #####:  900:	  return -1;
        -:  901:	}
        -:  902:		
    #####:  903:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  904:	{
    #####:  905:	  return -1;
        -:  906:	}
        -:  907:
    #####:  908:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  909:	{
    #####:  910:	  return -1;
        -:  911:	}
        -:  912:
    #####:  913:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  914:
        -:  915:      //discard card from hand
    #####:  916:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  917:
        -:  918:      //discard trashed card
    #####:  919:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  920:	{
    #####:  921:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  922:	    {
    #####:  923:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  924:	      break;
        -:  925:	    }
        -:  926:	}
        -:  927:			
    #####:  928:      return 0;
        -:  929:			
        -:  930:    case remodel:
    #####:  931:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  932:
    #####:  933:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  934:	{
    #####:  935:	  return -1;
        -:  936:	}
        -:  937:
    #####:  938:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  939:
        -:  940:      //discard card from hand
    #####:  941:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  942:
        -:  943:      //discard trashed card
    #####:  944:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  945:	{
    #####:  946:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  947:	    {
    #####:  948:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  949:	      break;
        -:  950:	    }
        -:  951:	}
        -:  952:
        -:  953:
    #####:  954:      return 0;
        -:  955:		
        -:  956:    case smithy:
        -:  957:/*
        -:  958:	  //+3 Cards
        -:  959:      for (i = 0; i < 3; i++)
        -:  960:	{
        -:  961:	  drawCard(currentPlayer, state);
        -:  962:	}
        -:  963:			
        -:  964:      //discard card from hand
        -:  965:      discardCard(handPos, currentPlayer, state, 0);
        -:  966:      return 0;
        -:  967: */
        1:  968:		return smithyCard(currentPlayer, handPos, state);
call    0 returned 100%
        -:  969:		
        -:  970:    case village:
        -:  971:/*
        -:  972:      //+1 Card
        -:  973:      drawCard(currentPlayer, state);
        -:  974:			
        -:  975:      //+2 Actions
        -:  976:      state->numActions = state->numActions + 2;
        -:  977:			
        -:  978:      //discard played card from hand
        -:  979:      discardCard(handPos, currentPlayer, state, 0);
        -:  980:      return 0;
        -:  981:*/
        1:  982:		return villageCard(currentPlayer, handPos, state);
call    0 returned 100%
        -:  983:			
        -:  984:    case baron:
    #####:  985:      state->numBuys++;//Increase buys by 1!
    #####:  986:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  987:	int p = 0;//Iterator for hand!
    #####:  988:	int card_not_discarded = 1;//Flag for discard set!
    #####:  989:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  990:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  991:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  992:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  993:	    state->discardCount[currentPlayer]++;
    #####:  994:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  995:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  996:	    }
    #####:  997:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  998:	    state->handCount[currentPlayer]--;
    #####:  999:	    card_not_discarded = 0;//Exit the loop
        -: 1000:	  }
    #####: 1001:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1002:	    if(DEBUG) {
        -: 1003:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1004:	      printf("Must gain an estate if there are any\n");
        -: 1005:	    }
    #####: 1006:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1007:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1008:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1009:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1010:		isGameOver(state);
call    0 never executed
        -: 1011:	      }
        -: 1012:	    }
    #####: 1013:	    card_not_discarded = 0;//Exit the loop
        -: 1014:	  }
        -: 1015:			    
        -: 1016:	  else{
    #####: 1017:	    p++;//Next card
        -: 1018:	  }
        -: 1019:	}
        -: 1020:      }
        -: 1021:			    
        -: 1022:      else{
    #####: 1023:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1024:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1025:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1026:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1027:	    isGameOver(state);
call    0 never executed
        -: 1028:	  }
        -: 1029:	}
        -: 1030:      }
        -: 1031:	    
        -: 1032:      
    #####: 1033:      return 0;
        -: 1034:		
        -: 1035:    case great_hall:
        -: 1036:      //+1 Card
    #####: 1037:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1038:			
        -: 1039:      //+1 Actions
    #####: 1040:      state->numActions++;
        -: 1041:			
        -: 1042:      //discard card from hand
    #####: 1043:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1044:      return 0;
        -: 1045:		
        -: 1046:    case minion:
        -: 1047:      //+1 action
    #####: 1048:      state->numActions++;
        -: 1049:			
        -: 1050:      //discard card from hand
    #####: 1051:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1052:			
    #####: 1053:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1054:	{
    #####: 1055:	  state->coins = state->coins + 2;
        -: 1056:	}
        -: 1057:			
    #####: 1058:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1059:	{
        -: 1060:	  //discard hand
    #####: 1061:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1062:	    {
    #####: 1063:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1064:	    }
        -: 1065:				
        -: 1066:	  //draw 4
    #####: 1067:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1068:	    {
    #####: 1069:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1070:	    }
        -: 1071:				
        -: 1072:	  //other players discard hand and redraw if hand size > 4
    #####: 1073:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1074:	    {
    #####: 1075:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1076:		{
    #####: 1077:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1078:		    {
        -: 1079:		      //discard hand
    #####: 1080:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1081:			{
    #####: 1082:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1083:			}
        -: 1084:							
        -: 1085:		      //draw 4
    #####: 1086:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1087:			{
    #####: 1088:			  drawCard(i, state);
call    0 never executed
        -: 1089:			}
        -: 1090:		    }
        -: 1091:		}
        -: 1092:	    }
        -: 1093:				
        -: 1094:	}
    #####: 1095:      return 0;
        -: 1096:		
        -: 1097:    case steward:
    #####: 1098:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1099:	{
        -: 1100:	  //+2 cards
    #####: 1101:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1102:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1103:	}
    #####: 1104:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1105:	{
        -: 1106:	  //+2 coins
    #####: 1107:	  state->coins = state->coins + 2;
        -: 1108:	}
        -: 1109:      else
        -: 1110:	{
        -: 1111:	  //trash 2 cards in hand
    #####: 1112:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1113:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1114:	}
        -: 1115:			
        -: 1116:      //discard card from hand
    #####: 1117:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1118:      return 0;
        -: 1119:		
        -: 1120:    case tribute:
    #####: 1121:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1122:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1123:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1124:	  state->deckCount[nextPlayer]--;
        -: 1125:	}
    #####: 1126:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1127:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1128:	  state->discardCount[nextPlayer]--;
        -: 1129:	}
        -: 1130:	else{
        -: 1131:	  //No Card to Reveal
        -: 1132:	  if (DEBUG){
        -: 1133:	    printf("No cards to reveal\n");
        -: 1134:	  }
        -: 1135:	}
        -: 1136:      }
        -: 1137:	    
        -: 1138:      else{
    #####: 1139:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1140:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1141:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1142:	    state->deckCount[nextPlayer]++;
    #####: 1143:	    state->discard[nextPlayer][i] = -1;
    #####: 1144:	    state->discardCount[nextPlayer]--;
        -: 1145:	  }
        -: 1146:			    
    #####: 1147:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1148:	} 
    #####: 1149:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1150:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1151:	state->deckCount[nextPlayer]--;
    #####: 1152:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1153:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1154:	state->deckCount[nextPlayer]--;
        -: 1155:      }    
        -: 1156:		       
    #####: 1157:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1158:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1159:	state->playedCardCount++;
    #####: 1160:	tributeRevealedCards[1] = -1;
        -: 1161:      }
        -: 1162:
    #####: 1163:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1164:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1165:	  state->coins += 2;
        -: 1166:	}
        -: 1167:		    
    #####: 1168:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1169:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1170:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1171:	}
        -: 1172:	else{//Action Card
    #####: 1173:	  state->numActions = state->numActions + 2;
        -: 1174:	}
        -: 1175:      }
        -: 1176:	    
    #####: 1177:      return 0;
        -: 1178:		
        -: 1179:    case ambassador:
    #####: 1180:      j = 0;		//used to check if player has enough cards to discard
        -: 1181:
    #####: 1182:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1183:	{
    #####: 1184:	  return -1;				
        -: 1185:	}
        -: 1186:
    #####: 1187:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1188:	{
    #####: 1189:	  return -1;
        -: 1190:	}
        -: 1191:
    #####: 1192:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1193:	{
    #####: 1194:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1195:	    {
    #####: 1196:	      j++;
        -: 1197:	    }
        -: 1198:	}
    #####: 1199:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1200:	{
    #####: 1201:	  return -1;				
        -: 1202:	}
        -: 1203:
        -: 1204:      if (DEBUG) 
        -: 1205:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1206:
        -: 1207:      //increase supply count for choosen card by amount being discarded
    #####: 1208:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1209:			
        -: 1210:      //each other player gains a copy of revealed card
    #####: 1211:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1212:	{
    #####: 1213:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1214:	    {
    #####: 1215:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1216:	    }
        -: 1217:	}
        -: 1218:
        -: 1219:      //discard played card from hand
    #####: 1220:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1221:
        -: 1222:      //trash copies of cards returned to supply
    #####: 1223:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1224:	{
    #####: 1225:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1226:	    {
    #####: 1227:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1228:		{
    #####: 1229:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1230:		  break;
        -: 1231:		}
        -: 1232:	    }
        -: 1233:	}			
        -: 1234:
    #####: 1235:      return 0;
        -: 1236:		
        -: 1237:    case cutpurse:
        -: 1238:
    #####: 1239:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1240:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1241:	{
    #####: 1242:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1243:	    {
    #####: 1244:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1245:		{
    #####: 1246:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1247:		    {
    #####: 1248:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1249:		      break;
        -: 1250:		    }
    #####: 1251:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1252:		    {
    #####: 1253:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1254:			{
        -: 1255:			  if (DEBUG)
        -: 1256:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1257:			}	
    #####: 1258:		      break;
        -: 1259:		    }		
        -: 1260:		}
        -: 1261:					
        -: 1262:	    }
        -: 1263:				
        -: 1264:	}				
        -: 1265:
        -: 1266:      //discard played card from hand
    #####: 1267:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1268:
    #####: 1269:      return 0;
        -: 1270:
        -: 1271:		
        -: 1272:    case embargo:
        -: 1273:/*
        -: 1274:      //+2 Coins
        -: 1275:      state->coins = state->coins + 2;
        -: 1276:			
        -: 1277:      //see if selected pile is in play
        -: 1278:      if ( state->supplyCount[choice1] == -1 )
        -: 1279:	{
        -: 1280:	  return -1;
        -: 1281:	}
        -: 1282: 
        -: 1283:      //add embargo token to selected supply pile
        -: 1284:      state->embargoTokens[choice1]++;
        -: 1285:			
        -: 1286:      //trash card
        -: 1287:      discardCard(handPos, currentPlayer, state, 1);		
        -: 1288:      return 0;
        -: 1289: */
    #####: 1290:		return embargoCard(currentPlayer, handPos, state, choice1);
call    0 never executed
        -: 1291:			
        -: 1292:    case outpost:
        -: 1293:      //set outpost flag
    #####: 1294:      state->outpostPlayed++;
        -: 1295:			
        -: 1296:      //discard card
    #####: 1297:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1298:      return 0;
        -: 1299:		
        -: 1300:    case salvager:
        -: 1301:      //+1 buy
    #####: 1302:      state->numBuys++;
        -: 1303:			
    #####: 1304:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1305:	{
        -: 1306:	  //gain coins equal to trashed card
    #####: 1307:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1308:	  //trash card
    #####: 1309:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1310:	}
        -: 1311:			
        -: 1312:      //discard card
    #####: 1313:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1314:      return 0;
        -: 1315:		
        -: 1316:    case sea_hag:
        -: 1317:
    #####: 1318:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1319:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1320:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1321:	  state->discardCount[i]++;
    #####: 1322:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1323:	}
        -: 1324:      }
    #####: 1325:      return 0;
        -: 1326:
        -: 1327:		//return sea_hagCard(currentPlayer, state);
        -: 1328:			
        -: 1329:    case treasure_map:
        -: 1330:      //search hand for another treasure_map
    #####: 1331:      index = -1;
    #####: 1332:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1333:	{
    #####: 1334:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1335:	    {
    #####: 1336:	      index = i;
    #####: 1337:	      break;
        -: 1338:	    }
        -: 1339:	}
    #####: 1340:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1341:	{
        -: 1342:	  //trash both treasure cards
    #####: 1343:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1344:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1345:
        -: 1346:	  //gain 4 Gold cards
    #####: 1347:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1348:	    {
    #####: 1349:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1350:	    }
        -: 1351:				
        -: 1352:	  //return success
    #####: 1353:	  return 1;
        -: 1354:	}
        -: 1355:			
        -: 1356:      //no second treasure_map found in hand
    #####: 1357:      return -1;
        -: 1358:    }
        -: 1359:	
    #####: 1360:  return -1;
        -: 1361:}
        -: 1362:
function discardCard called 3 returned 100% blocks executed 78%
        3: 1363:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1364:{
        -: 1365:	
        -: 1366:  //if card is not trashed, added to Played pile 
        3: 1367:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1368:    {
        -: 1369:      //add card to played pile
        3: 1370:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        3: 1371:      state->playedCardCount++;
        -: 1372:    }
        -: 1373:	
        -: 1374:  //set played card to -1
        3: 1375:  state->hand[currentPlayer][handPos] = -1;
        -: 1376:	
        -: 1377:  //remove card from player's hand
        3: 1378:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1379:    {
        -: 1380:      //reduce number of cards in hand
    #####: 1381:      state->handCount[currentPlayer]--;
        -: 1382:    }
        3: 1383:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1384:    {
        -: 1385:      //reduce number of cards in hand
    #####: 1386:      state->handCount[currentPlayer]--;
        -: 1387:    }
        -: 1388:  else 	
        -: 1389:    {
        -: 1390:      //replace discarded card with last card in hand
        3: 1391:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1392:      //set last card to -1
        3: 1393:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1394:      //reduce number of cards in hand
        3: 1395:      state->handCount[currentPlayer]--;
        -: 1396:    }
        -: 1397:	
        3: 1398:  return 0;
        -: 1399:}
        -: 1400:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1401:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1402:{
        -: 1403:  //Note: supplyPos is enum of choosen card
        -: 1404:	
        -: 1405:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1406:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1407:    {
    #####: 1408:      return -1;
        -: 1409:    }
        -: 1410:	
        -: 1411:  //added card for [whoseTurn] current player:
        -: 1412:  // toFlag = 0 : add to discard
        -: 1413:  // toFlag = 1 : add to deck
        -: 1414:  // toFlag = 2 : add to hand
        -: 1415:
    #####: 1416:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1417:    {
    #####: 1418:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1419:      state->deckCount[player]++;
        -: 1420:    }
    #####: 1421:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1422:    {
    #####: 1423:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1424:      state->handCount[player]++;
        -: 1425:    }
        -: 1426:  else
        -: 1427:    {
    #####: 1428:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1429:      state->discardCount[player]++;
        -: 1430:    }
        -: 1431:	
        -: 1432:  //decrease number in supply pile
    #####: 1433:  state->supplyCount[supplyPos]--;
        -: 1434:	 
    #####: 1435:  return 0;
        -: 1436:}
        -: 1437:
function updateCoins called 584 returned 100% blocks executed 100%
      584: 1438:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1439:{
        -: 1440:  int i;
        -: 1441:	
        -: 1442:  //reset coin count
      584: 1443:  state->coins = 0;
        -: 1444:
        -: 1445:  //add coins for each Treasure card in player's hand
     2184: 1446:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 73%
branch  1 taken 27% (fallthrough)
        -: 1447:    {
     1600: 1448:      if (state->hand[player][i] == copper)
branch  0 taken 49% (fallthrough)
branch  1 taken 51%
        -: 1449:	{
      790: 1450:	  state->coins += 1;
        -: 1451:	}
      810: 1452:      else if (state->hand[player][i] == silver)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
        -: 1453:	{
      220: 1454:	  state->coins += 2;
        -: 1455:	}
      590: 1456:      else if (state->hand[player][i] == gold)
branch  0 taken 37% (fallthrough)
branch  1 taken 63%
        -: 1457:	{
      220: 1458:	  state->coins += 3;
        -: 1459:	}	
        -: 1460:    }	
        -: 1461:
        -: 1462:  //add bonus
      584: 1463:  state->coins += bonus;
        -: 1464:
      584: 1465:  return 0;
        -: 1466:}
        -: 1467:
        -: 1468:
        -: 1469://end of dominion.c
        -: 1470:
